name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  prepare:
    name: Prepare Build Variables
    runs-on: ubuntu-24.04
    outputs:
      safe-tag: ${{ steps.vars.outputs.SAFE_TAG }}
      test-image-base: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ github.sha }}
      prod-image-base: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

    steps:
    - name: Sanitize branch name for Docker tags
      id: vars
      run: |
        BRANCH_NAME="${{ github.head_ref && github.head_ref || github.ref_name }}"
        SAFE_TAG=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
        echo "SAFE_TAG=$SAFE_TAG" >> $GITHUB_OUTPUT

  build-amd64:
    name: Build AMD64 Images
    runs-on: ubuntu-24.04
    needs: prepare
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push AMD64 test image
      uses: docker/build-push-action@v6
      with:
        context: .
        target: test
        platforms: linux/amd64
        tags: |
          ${{ needs.prepare.outputs.test-image-base }}-amd64
        cache-from: |
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ needs.prepare.outputs.safe-tag }}
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-main
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
        cache-to: type=inline
        pull: true
        push: true

    - name: Build and push AMD64 production image
      uses: docker/build-push-action@v6
      with:
        context: .
        target: production
        platforms: linux/amd64
        tags: |
          ${{ needs.prepare.outputs.prod-image-base }}-amd64
        cache-from: |
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.safe-tag }}
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ needs.prepare.outputs.safe-tag }}
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-main
        cache-to: type=inline
        push: true

  build-arm64:
    name: Build ARM64 Images
    runs-on: ubuntu-24.04-arm
    needs: prepare
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push ARM64 test image
      uses: docker/build-push-action@v6
      with:
        context: .
        target: test
        platforms: linux/arm64
        tags: |
          ${{ needs.prepare.outputs.test-image-base }}-arm64
        cache-from: |
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ needs.prepare.outputs.safe-tag }}
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-main
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
        cache-to: type=inline
        pull: true
        push: true

    - name: Build and push ARM64 production image
      uses: docker/build-push-action@v6
      with:
        context: .
        target: production
        platforms: linux/arm64
        tags: |
          ${{ needs.prepare.outputs.prod-image-base }}-arm64
        cache-from: |
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.safe-tag }}
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ needs.prepare.outputs.safe-tag }}
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-main
        cache-to: type=inline
        push: true

  create-temp-manifests:
    name: Create Temporary Multi-Arch Manifests
    runs-on: ubuntu-24.04
    needs: [prepare, build-amd64, build-arm64]
    permissions:
      contents: read
      packages: write

    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Verify architecture-specific images exist
      run: |
        echo "Checking if architecture-specific images are available..."
        docker buildx imagetools inspect ${{ needs.prepare.outputs.test-image-base }}-amd64
        docker buildx imagetools inspect ${{ needs.prepare.outputs.test-image-base }}-arm64
        docker buildx imagetools inspect ${{ needs.prepare.outputs.prod-image-base }}-amd64
        docker buildx imagetools inspect ${{ needs.prepare.outputs.prod-image-base }}-arm64

    - name: Create temporary test image manifest
      run: |
        echo "Creating multi-arch test manifest..."
        docker buildx imagetools create -t ${{ needs.prepare.outputs.test-image-base }} \
          ${{ needs.prepare.outputs.test-image-base }}-amd64 \
          ${{ needs.prepare.outputs.test-image-base }}-arm64

        echo "Verifying test manifest..."
        docker buildx imagetools inspect ${{ needs.prepare.outputs.test-image-base }}

    - name: Create temporary production image manifest
      run: |
        echo "Creating multi-arch production manifest..."
        docker buildx imagetools create -t ${{ needs.prepare.outputs.prod-image-base }} \
          ${{ needs.prepare.outputs.prod-image-base }}-amd64 \
          ${{ needs.prepare.outputs.prod-image-base }}-arm64

        echo "Verifying production manifest..."
        docker buildx imagetools inspect ${{ needs.prepare.outputs.prod-image-base }}

  test:
    name: Test Multi-Arch Image on ${{ matrix.platform }}
    runs-on: ${{ matrix.runner }}
    needs: [prepare, create-temp-manifests]
    permissions:
      contents: read
      packages: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-24.04
          - platform: linux/arm64
            runner: ubuntu-24.04-arm

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull test image for ${{ matrix.platform }}
      run: |
        echo "Pulling multi-arch test image for ${{ matrix.platform }}..."
        echo "Image: ${{ needs.prepare.outputs.test-image-base }}"

        # First, check if the manifest exists
        docker buildx imagetools inspect ${{ needs.prepare.outputs.test-image-base }} || {
          echo "ERROR: Multi-arch manifest not found!"
          echo "Expected image: ${{ needs.prepare.outputs.test-image-base }}"
          exit 1
        }

        # Pull the specific platform variant with retry
        for i in 1 2 3; do
          if docker pull --platform ${{ matrix.platform }} ${{ needs.prepare.outputs.test-image-base }}; then
            echo "Successfully pulled image on attempt $i"
            break
          else
            echo "Pull failed on attempt $i, retrying in 10 seconds..."
            sleep 10
          fi
        done

    - name: Run RSpec tests
      run: |
        docker run --rm --platform ${{ matrix.platform }} \
          -e COVERAGE=true -e COVERAGE_DIR=/tmp/coverage \
          ${{ needs.prepare.outputs.test-image-base }} \
          sh -c "cd /app && bundle exec rspec"

    - name: Run RuboCop
      run: |
        docker run --rm --platform ${{ matrix.platform }} \
          ${{ needs.prepare.outputs.test-image-base }} \
          sh -c "cd /app && bundle exec rubocop"

    - name: Run bundler-audit
      run: |
        docker run --rm --platform ${{ matrix.platform }} \
          ${{ needs.prepare.outputs.test-image-base }} \
          sh -c "cd /app && bundle exec bundler-audit check --update"

    # Note: Examples are tested in smoke-test job using production image

  smoke-test:
    name: Test Examples on Production Image ${{ matrix.platform }}
    runs-on: ${{ matrix.runner }}
    needs: [prepare, create-temp-manifests]
    permissions:
      contents: read
      packages: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-24.04
          - platform: linux/arm64
            runner: ubuntu-24.04-arm

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull production image for ${{ matrix.platform }}
      run: |
        echo "Pulling multi-arch production image for ${{ matrix.platform }}..."
        docker pull --platform ${{ matrix.platform }} ${{ needs.prepare.outputs.prod-image-base }}

    - name: Quick smoke test
      run: |
        RESPONSE=$(echo '{"jsonrpc":"2.0","id":1,"method":"initialize"}' | \
          docker run --rm --platform ${{ matrix.platform }} -i \
          ${{ needs.prepare.outputs.prod-image-base }} 2>/dev/null)

        echo "Response: $RESPONSE"
        if echo "$RESPONSE" | grep -q "protocolVersion"; then
          echo "✅ Basic smoke test passed"
        else
          echo "❌ Basic smoke test failed"
          exit 1
        fi

    - name: Test all examples on production image
      run: |
        echo "🧪 Running comprehensive example tests (111+ tests)..."
        if docker run --rm --platform ${{ matrix.platform }} \
          -v $PWD/examples:/app/examples:ro \
          -e DOCKER_IMAGE=${{ needs.prepare.outputs.prod-image-base }} \
          ${{ needs.prepare.outputs.prod-image-base }} \
          /app/examples/test_examples_in_container.sh; then
          echo "✅ All example tests passed!"
        else
          echo "❌ Some example tests failed. Checking for partial results..."
          echo "::group::Verbose test output for debugging"
          docker run --rm --platform ${{ matrix.platform }} \
            -v $PWD/examples:/app/examples:ro \
            -e VERBOSE=true \
            -e DOCKER_IMAGE=${{ needs.prepare.outputs.prod-image-base }} \
            ${{ needs.prepare.outputs.prod-image-base }} \
            /app/examples/test_examples_in_container.sh || true
          echo "::endgroup::"

          exit 1
        fi

  tag-and-push-final:
    name: Tag and Push Final Images
    runs-on: ubuntu-24.04
    needs: [prepare, test, smoke-test]
    permissions:
      contents: read
      packages: write

    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create final test image tags
      run: |
        # Tag the temporary multi-arch manifest with the branch tag
        docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ needs.prepare.outputs.safe-tag }} \
          ${{ needs.prepare.outputs.test-image-base }}

    - name: Create final production image tags
      run: |
        # Tag the temporary multi-arch manifest with the branch tag
        docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.safe-tag }} \
          ${{ needs.prepare.outputs.prod-image-base }}

    - name: Create and push latest tag (main branch only)
      if: github.ref == 'refs/heads/main'
      run: |
        docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
          ${{ needs.prepare.outputs.prod-image-base }}

        docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-main \
          ${{ needs.prepare.outputs.test-image-base }}

        docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main \
          ${{ needs.prepare.outputs.prod-image-base }}

  summary:
    name: Build Summary
    runs-on: ubuntu-24.04
    needs: [prepare, build-amd64, build-arm64, test, smoke-test, tag-and-push-final]
    if: always()

    steps:
    - name: Summary of pushed images
      run: |
        {
          echo "## Docker Images Published"
          echo ""
          echo "### Multi-Arch Images (linux/amd64, linux/arm64):"
          echo ""
          echo "#### Test Images:"
          echo "- \`${{ needs.prepare.outputs.test-image-base }}\` (SHA)"
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ needs.prepare.outputs.safe-tag }}\` (branch)"
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-main\`"
          fi
          echo ""
          echo "#### Production Images:"
          echo "- \`${{ needs.prepare.outputs.prod-image-base }}\` (SHA)"
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.safe-tag }}\` (branch)"
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main\`"
            echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`"
          fi
          echo ""
          echo "### Build Results:"
          echo "- AMD64 Build: ${{ needs.build-amd64.result == 'success' && '✅ Passed' || '❌ Failed' }}"
          echo "- ARM64 Build: ${{ needs.build-arm64.result == 'success' && '✅ Passed' || '❌ Failed' }}"
          echo "- Unit Tests (RSpec): ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }}"
          echo "- Integration Tests (111+ Examples): ${{ needs.smoke-test.result == 'success' && '✅ Passed' || '❌ Failed' }}"
          echo "- Final Tagging: ${{ needs.tag-and-push-final.result == 'success' && '✅ Passed' || '❌ Failed' }}"
          echo ""
          echo "### Test Coverage:"
          echo "- Unit Tests: RSpec with 99%+ coverage"
          echo "- Integration Tests: 111+ examples across 12 languages"
          echo "- Multi-file applications: All 12 languages tested"
          echo "- Security validation: All code runs in isolated containers"
        } >> $GITHUB_STEP_SUMMARY