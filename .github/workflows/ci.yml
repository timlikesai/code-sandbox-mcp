name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  prepare:
    name: Prepare Build Variables
    runs-on: ubuntu-22.04
    outputs:
      safe-tag: ${{ steps.vars.outputs.SAFE_TAG }}
      test-image-base: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ github.sha }}
      prod-image-base: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
    
    steps:
    - name: Sanitize branch name for Docker tags
      id: vars
      run: |
        BRANCH_NAME="${{ github.head_ref && github.head_ref || github.ref_name }}"
        SAFE_TAG=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
        echo "SAFE_TAG=$SAFE_TAG" >> $GITHUB_OUTPUT

  build-amd64:
    name: Build AMD64 Images
    runs-on: ubuntu-22.04
    needs: prepare
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push AMD64 test image
      uses: docker/build-push-action@v6
      with:
        context: .
        target: test
        platforms: linux/amd64
        tags: |
          ${{ needs.prepare.outputs.test-image-base }}-amd64
        cache-from: |
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ needs.prepare.outputs.safe-tag }}-amd64
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-main-amd64
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-amd64
        cache-to: type=inline
        pull: true
        push: true

    - name: Build and push AMD64 production image
      uses: docker/build-push-action@v6
      with:
        context: .
        target: production
        platforms: linux/amd64
        tags: |
          ${{ needs.prepare.outputs.prod-image-base }}-amd64
        cache-from: |
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.safe-tag }}-amd64
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-amd64
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ needs.prepare.outputs.safe-tag }}-amd64
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-main-amd64
        cache-to: type=inline
        push: true

  build-arm64:
    name: Build ARM64 Images
    runs-on: ubuntu-22.04
    needs: prepare
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push ARM64 test image
      uses: docker/build-push-action@v6
      with:
        context: .
        target: test
        platforms: linux/arm64
        tags: |
          ${{ needs.prepare.outputs.test-image-base }}-arm64
        cache-from: |
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ needs.prepare.outputs.safe-tag }}-arm64
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-main-arm64
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-arm64
        cache-to: type=inline
        pull: true
        push: true

    - name: Build and push ARM64 production image
      uses: docker/build-push-action@v6
      with:
        context: .
        target: production
        platforms: linux/arm64
        tags: |
          ${{ needs.prepare.outputs.prod-image-base }}-arm64
        cache-from: |
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.safe-tag }}-arm64
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-arm64
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ needs.prepare.outputs.safe-tag }}-arm64
          type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-main-arm64
        cache-to: type=inline
        push: true

  create-temp-manifests:
    name: Create Temporary Multi-Arch Manifests
    runs-on: ubuntu-22.04
    needs: [prepare, build-amd64, build-arm64]
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create temporary test image manifest
      run: |
        docker buildx imagetools create -t ${{ needs.prepare.outputs.test-image-base }} \
          ${{ needs.prepare.outputs.test-image-base }}-amd64 \
          ${{ needs.prepare.outputs.test-image-base }}-arm64

    - name: Create temporary production image manifest
      run: |
        docker buildx imagetools create -t ${{ needs.prepare.outputs.prod-image-base }} \
          ${{ needs.prepare.outputs.prod-image-base }}-amd64 \
          ${{ needs.prepare.outputs.prod-image-base }}-arm64

  test:
    name: Test Multi-Arch Image on ${{ matrix.platform }}
    runs-on: ubuntu-22.04
    needs: [prepare, create-temp-manifests]
    strategy:
      fail-fast: false
      matrix:
        platform: [linux/amd64, linux/arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull test image for ${{ matrix.platform }}
      run: |
        echo "Pulling multi-arch test image for ${{ matrix.platform }}..."
        docker pull --platform ${{ matrix.platform }} ${{ needs.prepare.outputs.test-image-base }}

    - name: Run RSpec tests
      run: |
        docker run --rm --platform ${{ matrix.platform }} \
          -e COVERAGE=true -e COVERAGE_DIR=/tmp/coverage \
          ${{ needs.prepare.outputs.test-image-base }} \
          sh -c "cd /app && bundle exec rspec"

    - name: Run RuboCop
      run: |
        docker run --rm --platform ${{ matrix.platform }} \
          ${{ needs.prepare.outputs.test-image-base }} \
          sh -c "cd /app && bundle exec rubocop"

    - name: Run Reek
      run: |
        docker run --rm --platform ${{ matrix.platform }} \
          ${{ needs.prepare.outputs.test-image-base }} \
          sh -c "cd /app && bundle exec reek"

    - name: Run bundler-audit
      run: |
        docker run --rm --platform ${{ matrix.platform }} \
          ${{ needs.prepare.outputs.test-image-base }} \
          sh -c "cd /app && bundle exec bundler-audit check --update"

    - name: Test examples
      run: |
        docker run --rm --platform ${{ matrix.platform }} \
          -v $PWD/examples:/app/examples:ro \
          ${{ needs.prepare.outputs.test-image-base }} \
          /app/examples/test_examples_in_container.sh

  smoke-test:
    name: Smoke Test Multi-Arch Production Image on ${{ matrix.platform }}
    runs-on: ubuntu-22.04
    needs: [prepare, create-temp-manifests, test]
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    
    steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Smoke test production image on ${{ matrix.platform }}
      run: |
        echo "Testing multi-arch production image on ${{ matrix.platform }}..."
        docker pull --platform ${{ matrix.platform }} ${{ needs.prepare.outputs.prod-image-base }}
        
        RESPONSE=$(echo '{"jsonrpc":"2.0","id":1,"method":"initialize"}' | \
          docker run --rm --platform ${{ matrix.platform }} -i \
          ${{ needs.prepare.outputs.prod-image-base }} 2>/dev/null)
        
        echo "Response: $RESPONSE"
        if echo "$RESPONSE" | grep -q "protocolVersion"; then
          echo "✅ Production image smoke test passed on ${{ matrix.platform }}"
        else
          echo "❌ Production image smoke test failed on ${{ matrix.platform }}"
          exit 1
        fi

  tag-and-push-final:
    name: Tag and Push Final Images
    runs-on: ubuntu-22.04
    needs: [prepare, smoke-test]
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create final test image tags
      run: |
        # Tag the temporary multi-arch manifest with the branch tag
        docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ needs.prepare.outputs.safe-tag }} \
          ${{ needs.prepare.outputs.test-image-base }}

    - name: Create final production image tags
      run: |
        # Tag the temporary multi-arch manifest with the branch tag
        docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.safe-tag }} \
          ${{ needs.prepare.outputs.prod-image-base }}

    - name: Create and push latest tag (main branch only)
      if: github.ref == 'refs/heads/main'
      run: |
        docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
          ${{ needs.prepare.outputs.prod-image-base }}
        
        docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-main \
          ${{ needs.prepare.outputs.test-image-base }}
        
        docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main \
          ${{ needs.prepare.outputs.prod-image-base }}

  cleanup-arch-specific:
    name: Cleanup Architecture-Specific Images
    runs-on: ubuntu-22.04
    needs: [prepare, tag-and-push-final]
    if: always() && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    continue-on-error: true
    
    steps:
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Delete architecture-specific tags
      run: |
        # Note: This requires the gh CLI and appropriate permissions
        # For now, we'll just document what tags exist
        echo "Architecture-specific images that could be cleaned up:"
        echo "- ${{ needs.prepare.outputs.test-image-base }}-amd64"
        echo "- ${{ needs.prepare.outputs.test-image-base }}-arm64"
        echo "- ${{ needs.prepare.outputs.prod-image-base }}-amd64"
        echo "- ${{ needs.prepare.outputs.prod-image-base }}-arm64"

  summary:
    name: Build Summary
    runs-on: ubuntu-22.04
    needs: [prepare, build-amd64, build-arm64, test, smoke-test, tag-and-push-final]
    if: always()
    
    steps:
    - name: Summary of pushed images
      run: |
        {
          echo "## Docker Images Published"
          echo ""
          echo "### Multi-Arch Images (linux/amd64, linux/arm64):"
          echo ""
          echo "#### Test Images:"
          echo "- \`${{ needs.prepare.outputs.test-image-base }}\` (SHA)"
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-${{ needs.prepare.outputs.safe-tag }}\` (branch)"
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-main\`"
          fi
          echo ""
          echo "#### Production Images:"
          echo "- \`${{ needs.prepare.outputs.prod-image-base }}\` (SHA)"
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.prepare.outputs.safe-tag }}\` (branch)"
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main\`"
            echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`"
          fi
          echo ""
          echo "### Build Results:"
          echo "- AMD64 Build: ${{ needs.build-amd64.result == 'success' && '✅ Passed' || '❌ Failed' }}"
          echo "- ARM64 Build: ${{ needs.build-arm64.result == 'success' && '✅ Passed' || '❌ Failed' }}"
          echo "- Tests: ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }}"
          echo "- Smoke Tests: ${{ needs.smoke-test.result == 'success' && '✅ Passed' || '❌ Failed' }}"
          echo "- Final Tagging: ${{ needs.tag-and-push-final.result == 'success' && '✅ Passed' || '❌ Failed' }}"
        } >> $GITHUB_STEP_SUMMARY