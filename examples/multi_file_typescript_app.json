[
  {
    "jsonrpc": "2.0",
    "id": 1,
    "method": "tools/call",
    "params": {
      "name": "validate_code",
      "arguments": {
        "language": "typescript",
        "filename": "types.ts",
        "save": true,
        "session_id": "typescript-taskmanager",
        "code": "// Type definitions for our TypeScript task management application\n\nexport interface User {\n  id: string;\n  username: string;\n  email: string;\n  role: UserRole;\n  createdAt: Date;\n  active: boolean;\n}\n\nexport enum UserRole {\n  Admin = 'admin',\n  Manager = 'manager',\n  Member = 'member'\n}\n\nexport interface Task {\n  id: string;\n  title: string;\n  description: string;\n  status: TaskStatus;\n  priority: TaskPriority;\n  assigneeId: string;\n  createdBy: string;\n  dueDate?: Date;\n  tags: string[];\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport enum TaskStatus {\n  Todo = 'todo',\n  InProgress = 'in-progress',\n  Review = 'review',\n  Done = 'done'\n}\n\nexport enum TaskPriority {\n  Low = 'low',\n  Medium = 'medium',\n  High = 'high',\n  Urgent = 'urgent'\n}\n\nexport interface TaskFilter {\n  status?: TaskStatus;\n  priority?: TaskPriority;\n  assigneeId?: string;\n  tags?: string[];\n}\n\nexport interface CreateTaskDto {\n  title: string;\n  description: string;\n  priority: TaskPriority;\n  assigneeId: string;\n  dueDate?: string;\n  tags?: string[];\n}\n\nexport interface UpdateTaskDto {\n  title?: string;\n  description?: string;\n  status?: TaskStatus;\n  priority?: TaskPriority;\n  assigneeId?: string;\n  dueDate?: string;\n  tags?: string[];\n}\n\nexport interface ApiResponse<T> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  timestamp: string;\n}\n\nexport type TaskStats = {\n  total: number;\n  byStatus: Record<TaskStatus, number>;\n  byPriority: Record<TaskPriority, number>;\n  overdue: number;\n};\n\nconsole.log('✓ types.ts validated and saved');"
      }
    }
  },
  {
    "jsonrpc": "2.0",
    "id": 2,
    "method": "tools/call",
    "params": {
      "name": "validate_code",
      "arguments": {
        "language": "typescript",
        "filename": "utils.ts",
        "save": true,
        "session_id": "typescript-taskmanager",
        "code": "// Utility functions for our TypeScript task management application\n\nimport { Task, TaskStatus, TaskPriority, User, ApiResponse } from './types';\n\nexport function generateId(): string {\n  return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n}\n\nexport function validateEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\nexport function sanitizeString(input: string, maxLength: number = 1000): string {\n  return input.trim().slice(0, maxLength);\n}\n\nexport function formatDate(date: Date): string {\n  return date.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  });\n}\n\nexport function parseDate(dateString: string): Date | null {\n  const date = new Date(dateString);\n  return isNaN(date.getTime()) ? null : date;\n}\n\nexport function isTaskOverdue(task: Task): boolean {\n  if (!task.dueDate || task.status === TaskStatus.Done) {\n    return false;\n  }\n  return new Date(task.dueDate) < new Date();\n}\n\nexport function sortTasksByPriority(tasks: Task[]): Task[] {\n  const priorityOrder = {\n    [TaskPriority.Urgent]: 0,\n    [TaskPriority.High]: 1,\n    [TaskPriority.Medium]: 2,\n    [TaskPriority.Low]: 3\n  };\n  \n  return [...tasks].sort((a, b) => {\n    return priorityOrder[a.priority] - priorityOrder[b.priority];\n  });\n}\n\nexport function groupTasksByStatus(tasks: Task[]): Map<TaskStatus, Task[]> {\n  const grouped = new Map<TaskStatus, Task[]>();\n  \n  for (const status of Object.values(TaskStatus)) {\n    grouped.set(status, []);\n  }\n  \n  tasks.forEach(task => {\n    const statusTasks = grouped.get(task.status) || [];\n    statusTasks.push(task);\n    grouped.set(task.status, statusTasks);\n  });\n  \n  return grouped;\n}\n\nexport function createApiResponse<T>(data?: T, error?: string): ApiResponse<T> {\n  return {\n    success: !error,\n    data,\n    error,\n    timestamp: new Date().toISOString()\n  };\n}\n\nexport class Logger {\n  constructor(private readonly context: string) {}\n  \n  info(message: string, data?: any): void {\n    console.log(`[${new Date().toISOString()}] [${this.context}] INFO:`, message, data || '');\n  }\n  \n  error(message: string, error?: any): void {\n    console.error(`[${new Date().toISOString()}] [${this.context}] ERROR:`, message, error || '');\n  }\n  \n  debug(message: string, data?: any): void {\n    console.log(`[${new Date().toISOString()}] [${this.context}] DEBUG:`, message, data || '');\n  }\n}\n\nexport function hasPermission(user: User, action: string): boolean {\n  const permissions = {\n    admin: ['create', 'read', 'update', 'delete', 'assign'],\n    manager: ['create', 'read', 'update', 'assign'],\n    member: ['create', 'read', 'update']\n  };\n  \n  return permissions[user.role]?.includes(action) || false;\n}\n\nconsole.log('✓ utils.ts validated and saved');"
      }
    }
  },
  {
    "jsonrpc": "2.0",
    "id": 3,
    "method": "tools/call",
    "params": {
      "name": "validate_code",
      "arguments": {
        "language": "typescript",
        "filename": "service.ts",
        "save": true,
        "session_id": "typescript-taskmanager",
        "code": "// Service classes for our TypeScript task management application\n\nimport {\n  Task, User, TaskStatus, TaskPriority, TaskFilter,\n  CreateTaskDto, UpdateTaskDto, ApiResponse, TaskStats, UserRole\n} from './types';\nimport {\n  generateId, validateEmail, sanitizeString, parseDate,\n  isTaskOverdue, sortTasksByPriority, createApiResponse,\n  Logger, hasPermission\n} from './utils';\n\nexport class UserService {\n  private users: Map<string, User> = new Map();\n  private logger = new Logger('UserService');\n  \n  createUser(username: string, email: string, role: UserRole = UserRole.Member): ApiResponse<User> {\n    try {\n      if (!username || !email) {\n        return createApiResponse(undefined, 'Username and email are required');\n      }\n      \n      if (!validateEmail(email)) {\n        return createApiResponse(undefined, 'Invalid email format');\n      }\n      \n      const user: User = {\n        id: generateId(),\n        username: sanitizeString(username, 50),\n        email: sanitizeString(email, 100),\n        role,\n        createdAt: new Date(),\n        active: true\n      };\n      \n      this.users.set(user.id, user);\n      this.logger.info(`User created: ${user.username}`);\n      \n      return createApiResponse(user);\n    } catch (error) {\n      this.logger.error('Failed to create user', error);\n      return createApiResponse(undefined, 'Failed to create user');\n    }\n  }\n  \n  getUser(userId: string): User | undefined {\n    return this.users.get(userId);\n  }\n  \n  getAllUsers(): User[] {\n    return Array.from(this.users.values());\n  }\n  \n  updateUserRole(userId: string, newRole: UserRole): ApiResponse<User> {\n    const user = this.users.get(userId);\n    if (!user) {\n      return createApiResponse(undefined, 'User not found');\n    }\n    \n    user.role = newRole;\n    this.logger.info(`Updated role for user ${user.username} to ${newRole}`);\n    \n    return createApiResponse(user);\n  }\n}\n\nexport class TaskService {\n  private tasks: Map<string, Task> = new Map();\n  private logger = new Logger('TaskService');\n  \n  constructor(private userService: UserService) {}\n  \n  createTask(dto: CreateTaskDto, createdBy: string): ApiResponse<Task> {\n    try {\n      // Validate required fields\n      if (!dto.title || !dto.description || !dto.assigneeId) {\n        return createApiResponse(undefined, 'Title, description, and assignee are required');\n      }\n      \n      // Validate assignee exists\n      const assignee = this.userService.getUser(dto.assigneeId);\n      if (!assignee) {\n        return createApiResponse(undefined, 'Assignee not found');\n      }\n      \n      // Parse due date if provided\n      let dueDate: Date | undefined;\n      if (dto.dueDate) {\n        const parsed = parseDate(dto.dueDate);\n        if (!parsed) {\n          return createApiResponse(undefined, 'Invalid due date format');\n        }\n        dueDate = parsed;\n      }\n      \n      const task: Task = {\n        id: generateId(),\n        title: sanitizeString(dto.title, 200),\n        description: sanitizeString(dto.description, 2000),\n        status: TaskStatus.Todo,\n        priority: dto.priority,\n        assigneeId: dto.assigneeId,\n        createdBy,\n        dueDate,\n        tags: dto.tags?.map(tag => sanitizeString(tag, 50)) || [],\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      \n      this.tasks.set(task.id, task);\n      this.logger.info(`Task created: ${task.title}`);\n      \n      return createApiResponse(task);\n    } catch (error) {\n      this.logger.error('Failed to create task', error);\n      return createApiResponse(undefined, 'Failed to create task');\n    }\n  }\n  \n  updateTask(taskId: string, dto: UpdateTaskDto, userId: string): ApiResponse<Task> {\n    const task = this.tasks.get(taskId);\n    if (!task) {\n      return createApiResponse(undefined, 'Task not found');\n    }\n    \n    const user = this.userService.getUser(userId);\n    if (!user) {\n      return createApiResponse(undefined, 'User not found');\n    }\n    \n    // Check permissions\n    if (task.assigneeId !== userId && !hasPermission(user, 'assign')) {\n      return createApiResponse(undefined, 'Insufficient permissions');\n    }\n    \n    // Update fields\n    if (dto.title !== undefined) task.title = sanitizeString(dto.title, 200);\n    if (dto.description !== undefined) task.description = sanitizeString(dto.description, 2000);\n    if (dto.status !== undefined) task.status = dto.status;\n    if (dto.priority !== undefined) task.priority = dto.priority;\n    if (dto.assigneeId !== undefined) {\n      const newAssignee = this.userService.getUser(dto.assigneeId);\n      if (!newAssignee) {\n        return createApiResponse(undefined, 'New assignee not found');\n      }\n      task.assigneeId = dto.assigneeId;\n    }\n    if (dto.dueDate !== undefined) {\n      const parsed = parseDate(dto.dueDate);\n      if (!parsed) {\n        return createApiResponse(undefined, 'Invalid due date format');\n      }\n      task.dueDate = parsed;\n    }\n    if (dto.tags !== undefined) {\n      task.tags = dto.tags.map(tag => sanitizeString(tag, 50));\n    }\n    \n    task.updatedAt = new Date();\n    this.logger.info(`Task updated: ${task.title}`);\n    \n    return createApiResponse(task);\n  }\n  \n  getTasks(filter?: TaskFilter): Task[] {\n    let tasks = Array.from(this.tasks.values());\n    \n    if (filter) {\n      if (filter.status) {\n        tasks = tasks.filter(t => t.status === filter.status);\n      }\n      if (filter.priority) {\n        tasks = tasks.filter(t => t.priority === filter.priority);\n      }\n      if (filter.assigneeId) {\n        tasks = tasks.filter(t => t.assigneeId === filter.assigneeId);\n      }\n      if (filter.tags && filter.tags.length > 0) {\n        tasks = tasks.filter(t => \n          filter.tags!.some(tag => t.tags.includes(tag))\n        );\n      }\n    }\n    \n    return sortTasksByPriority(tasks);\n  }\n  \n  getTaskStats(): TaskStats {\n    const tasks = Array.from(this.tasks.values());\n    \n    const stats: TaskStats = {\n      total: tasks.length,\n      byStatus: {\n        [TaskStatus.Todo]: 0,\n        [TaskStatus.InProgress]: 0,\n        [TaskStatus.Review]: 0,\n        [TaskStatus.Done]: 0\n      },\n      byPriority: {\n        [TaskPriority.Low]: 0,\n        [TaskPriority.Medium]: 0,\n        [TaskPriority.High]: 0,\n        [TaskPriority.Urgent]: 0\n      },\n      overdue: 0\n    };\n    \n    tasks.forEach(task => {\n      stats.byStatus[task.status]++;\n      stats.byPriority[task.priority]++;\n      if (isTaskOverdue(task)) {\n        stats.overdue++;\n      }\n    });\n    \n    return stats;\n  }\n  \n  deleteTask(taskId: string, userId: string): ApiResponse<void> {\n    const task = this.tasks.get(taskId);\n    if (!task) {\n      return createApiResponse(undefined, 'Task not found');\n    }\n    \n    const user = this.userService.getUser(userId);\n    if (!user || !hasPermission(user, 'delete')) {\n      return createApiResponse(undefined, 'Insufficient permissions');\n    }\n    \n    this.tasks.delete(taskId);\n    this.logger.info(`Task deleted: ${task.title}`);\n    \n    return createApiResponse();\n  }\n}\n\nconsole.log('✓ service.ts validated and saved');"
      }
    }
  },
  {
    "jsonrpc": "2.0",
    "id": 4,
    "method": "tools/call",
    "params": {
      "name": "execute_code",
      "arguments": {
        "language": "typescript",
        "filename": "main.ts",
        "save": true,
        "session_id": "typescript-taskmanager",
        "code": "#!/usr/bin/env ts-node\n// Main application runner for TypeScript task management system\n\nconsole.log('=== MULTI-FILE TYPESCRIPT TASK MANAGEMENT DEMO ===');\nconsole.log();\n\n// Import our custom modules (they should be available in the session)\ntry {\n  const { UserRole, TaskStatus, TaskPriority } = require('./types');\n  const { Logger, formatDate, groupTasksByStatus } = require('./utils');\n  const { UserService, TaskService } = require('./service');\n  console.log('✓ All modules imported successfully');\n  \n  console.log();\n  console.log('=== INITIALIZING APPLICATION ===');\n  \n  // Create services\n  const userService = new UserService();\n  const taskService = new TaskService(userService);\n  const logger = new Logger('MainApp');\n  \n  logger.info('Application initialized');\n  \n  console.log();\n  console.log('=== CREATING USERS ===');\n  \n  // Create users with different roles\n  const adminResult = userService.createUser('admin', 'admin@company.com', UserRole.Admin);\n  console.log('Admin created:', JSON.stringify(adminResult, null, 2));\n  \n  const managerResult = userService.createUser('sarah', 'sarah@company.com', UserRole.Manager);\n  console.log('\\nManager created:', JSON.stringify(managerResult, null, 2));\n  \n  const member1Result = userService.createUser('john', 'john@company.com', UserRole.Member);\n  console.log('\\nMember 1 created:', JSON.stringify(member1Result, null, 2));\n  \n  const member2Result = userService.createUser('alice', 'alice@company.com', UserRole.Member);\n  console.log('\\nMember 2 created:', JSON.stringify(member2Result, null, 2));\n  \n  // Store user IDs for later use\n  const adminId = adminResult.data!.id;\n  const managerId = managerResult.data!.id;\n  const johnId = member1Result.data!.id;\n  const aliceId = member2Result.data!.id;\n  \n  console.log();\n  console.log('=== CREATING TASKS ===');\n  \n  // Create various tasks\n  const task1 = taskService.createTask({\n    title: 'Implement user authentication',\n    description: 'Add JWT-based authentication to the API endpoints',\n    priority: TaskPriority.High,\n    assigneeId: johnId,\n    tags: ['backend', 'security'],\n    dueDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString() // 1 week from now\n  }, managerId);\n  console.log('Task 1 created:', JSON.stringify(task1, null, 2));\n  \n  const task2 = taskService.createTask({\n    title: 'Design new dashboard UI',\n    description: 'Create mockups for the new analytics dashboard',\n    priority: TaskPriority.Medium,\n    assigneeId: aliceId,\n    tags: ['frontend', 'design'],\n    dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString() // 3 days from now\n  }, managerId);\n  console.log('\\nTask 2 created:', JSON.stringify(task2, null, 2));\n  \n  const task3 = taskService.createTask({\n    title: 'Fix critical production bug',\n    description: 'Memory leak in the worker process needs immediate attention',\n    priority: TaskPriority.Urgent,\n    assigneeId: johnId,\n    tags: ['bug', 'production'],\n    dueDate: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString() // Yesterday (overdue)\n  }, adminId);\n  console.log('\\nTask 3 created:', JSON.stringify(task3, null, 2));\n  \n  const task4 = taskService.createTask({\n    title: 'Write API documentation',\n    description: 'Document all REST API endpoints with examples',\n    priority: TaskPriority.Low,\n    assigneeId: aliceId,\n    tags: ['documentation']\n  }, managerId);\n  console.log('\\nTask 4 created:', JSON.stringify(task4, null, 2));\n  \n  console.log();\n  console.log('=== UPDATING TASK STATUS ===');\n  \n  // Update some task statuses\n  const update1 = taskService.updateTask(task1.data!.id, {\n    status: TaskStatus.InProgress\n  }, johnId);\n  console.log('Task 1 updated to InProgress');\n  \n  const update2 = taskService.updateTask(task2.data!.id, {\n    status: TaskStatus.Review,\n    tags: ['frontend', 'design', 'priority']\n  }, aliceId);\n  console.log('Task 2 updated to Review with new tags');\n  \n  const update3 = taskService.updateTask(task3.data!.id, {\n    status: TaskStatus.Done\n  }, johnId);\n  console.log('Task 3 marked as Done');\n  \n  console.log();\n  console.log('=== QUERYING TASKS ===');\n  \n  // Get tasks by different filters\n  console.log('\\nJohn\\'s tasks:');\n  const johnsTasks = taskService.getTasks({ assigneeId: johnId });\n  johnsTasks.forEach(task => {\n    console.log(`- [${task.priority.toUpperCase()}] ${task.title} (${task.status})`);\n  });\n  \n  console.log('\\nHigh priority tasks:');\n  const highPriorityTasks = taskService.getTasks({ priority: TaskPriority.High });\n  highPriorityTasks.forEach(task => {\n    console.log(`- ${task.title} assigned to ${userService.getUser(task.assigneeId)?.username}`);\n  });\n  \n  console.log('\\nTasks with \"bug\" tag:');\n  const bugTasks = taskService.getTasks({ tags: ['bug'] });\n  bugTasks.forEach(task => {\n    console.log(`- ${task.title} (${task.status})`);\n  });\n  \n  console.log();\n  console.log('=== TASK STATISTICS ===');\n  \n  const stats = taskService.getTaskStats();\n  console.log('\\nTask Statistics:', JSON.stringify(stats, null, 2));\n  \n  console.log();\n  console.log('=== GROUPED BY STATUS ===');\n  \n  const allTasks = taskService.getTasks();\n  const grouped = groupTasksByStatus(allTasks);\n  \n  grouped.forEach((tasks, status) => {\n    console.log(`\\n${status.toUpperCase()} (${tasks.length}):`);\n    tasks.forEach(task => {\n      const assignee = userService.getUser(task.assigneeId);\n      console.log(`  - ${task.title} [${assignee?.username}]`);\n    });\n  });\n  \n  console.log();\n  console.log('=== TESTING ERROR HANDLING ===');\n  \n  // Test invalid email\n  const invalidUser = userService.createUser('baduser', 'invalid-email');\n  console.log('\\nInvalid email test:', invalidUser.error);\n  \n  // Test missing required fields\n  const invalidTask = taskService.createTask({\n    title: '',\n    description: 'Missing title',\n    priority: TaskPriority.Low,\n    assigneeId: johnId\n  }, managerId);\n  console.log('\\nMissing title test:', invalidTask.error);\n  \n  // Test permission denied\n  const permissionTest = taskService.deleteTask(task1.data!.id, johnId);\n  console.log('\\nPermission denied test:', permissionTest.error);\n  \n  // Test successful deletion by admin\n  const deleteTest = taskService.deleteTask(task4.data!.id, adminId);\n  console.log('\\nTask deletion by admin:', deleteTest.success ? 'Success' : deleteTest.error);\n  \n  console.log();\n  console.log('=== APPLICATION SUMMARY ===');\n  console.log(`Total users: ${userService.getAllUsers().length}`);\n  console.log(`Total tasks: ${taskService.getTasks().length}`);\n  console.log(`Overdue tasks: ${stats.overdue}`);\n  \n  console.log('\\n✅ Multi-file TypeScript application demo completed!');\n  console.log('\\n📝 TypeScript Features Demonstrated:');\n  console.log('  - Interfaces and type definitions');\n  console.log('  - Enums for constants');\n  console.log('  - Classes with private members');\n  console.log('  - Generic types in ApiResponse<T>');\n  console.log('  - Module imports/exports');\n  console.log('  - Type guards and validation');\n  console.log('  - Optional and required properties');\n  console.log('\\n🔄 All files persist within this container session');\n  console.log('🗑️  Files will be cleaned up when container restarts');\n  console.log('🔒 Host system remains completely isolated');\n  \n} catch (error: any) {\n  console.error('✗ Module import failed:', error.message);\n  console.error('Make sure all TypeScript files were saved to the session');\n  process.exit(1);\n}"
      }
    }
  }
]