{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "tools/call",
  "params": {
    "name": "execute_code",
    "arguments": {
      "language": "java",
      "code": "// Java Package/Dependency Management Demo\n// Note: Java doesn't have a built-in package manager like npm/pip\n// But we can demonstrate downloading JARs and using them\n\nimport java.io.*;\nimport java.net.*;\nimport java.nio.file.*;\n\npublic class main {\n    public static void main(String[] args) {\n        System.out.println(\"=== JAVA PACKAGE MANAGEMENT DEMO ===\");\n        System.out.println();\n        \n        System.out.println(\"Java approach to dependencies:\");\n        System.out.println(\"• Traditional: Maven/Gradle with pom.xml/build.gradle\");\n        System.out.println(\"• Modern: jbang for script-like dependency management\");\n        System.out.println(\"• Manual: Download JARs directly\");\n        System.out.println();\n        \n        // Demonstrate downloading a JAR file\n        System.out.println(\"=== DOWNLOADING JAR DEPENDENCY ===\");\n        try {\n            // Download a simple JSON library JAR\n            String jarUrl = \"https://repo1.maven.org/maven2/org/json/json/20240303/json-20240303.jar\";\n            String jarPath = \"/tmp/json.jar\";\n            \n            System.out.println(\"Downloading JSON library JAR...\");\n            downloadFile(jarUrl, jarPath);\n            \n            File jarFile = new File(jarPath);\n            if (jarFile.exists()) {\n                System.out.println(\"✓ JAR downloaded successfully: \" + jarFile.length() + \" bytes\");\n                System.out.println(\"✓ JAR location: \" + jarPath);\n            } else {\n                System.out.println(\"✗ JAR download failed\");\n            }\n            \n        } catch (Exception e) {\n            System.out.println(\"✗ JAR download failed: \" + e.getMessage());\n        }\n        \n        System.out.println();\n        System.out.println(\"=== JAVA CLASSPATH DEMO ===\");\n        System.out.println(\"In a real scenario, you would:\");\n        System.out.println(\"1. Add JAR to classpath: java -cp /tmp/json.jar:. MainClass\");\n        System.out.println(\"2. Or use URLClassLoader to load JAR at runtime\");\n        System.out.println();\n        \n        // Demonstrate system properties and environment\n        System.out.println(\"=== JAVA ENVIRONMENT INFO ===\");\n        System.out.println(\"Java Version: \" + System.getProperty(\"java.version\"));\n        System.out.println(\"Java Home: \" + System.getProperty(\"java.home\"));\n        System.out.println(\"User Dir: \" + System.getProperty(\"user.dir\"));\n        System.out.println(\"Temp Dir: \" + System.getProperty(\"java.io.tmpdir\"));\n        \n        System.out.println();\n        System.out.println(\"=== SECURITY SUMMARY ===\");\n        System.out.println(\"• Downloaded JARs stored in container temp space\");\n        System.out.println(\"• JARs available to all JVM languages (Java, Kotlin, Scala, Groovy, Clojure)\");\n        System.out.println(\"• All dependencies removed when container restarts\");\n        System.out.println(\"• Host JVM installation remains clean\");\n    }\n    \n    private static void downloadFile(String urlString, String destinationPath) throws Exception {\n        URL url = new URL(urlString);\n        try (InputStream in = url.openStream();\n             FileOutputStream out = new FileOutputStream(destinationPath)) {\n            \n            byte[] buffer = new byte[8192];\n            int bytesRead;\n            while ((bytesRead = in.read(buffer)) != -1) {\n                out.write(buffer, 0, bytesRead);\n            }\n        }\n    }\n}"
    }
  }
}