[
  {
    "jsonrpc": "2.0",
    "id": 1,
    "method": "tools/call",
    "params": {
      "name": "validate_code",
      "arguments": {
        "language": "javascript",
        "filename": "utils.js",
        "save": true,
        "session_id": "js-microservice",
        "code": "// Utility functions for our Node.js microservice\nconst crypto = require('crypto');\n\nclass Logger {\n    constructor(service) {\n        this.service = service;\n    }\n    \n    info(message) {\n        console.log(`[${new Date().toISOString()}] ${this.service} INFO: ${message}`);\n    }\n    \n    error(message) {\n        console.log(`[${new Date().toISOString()}] ${this.service} ERROR: ${message}`);\n    }\n    \n    debug(message) {\n        console.log(`[${new Date().toISOString()}] ${this.service} DEBUG: ${message}`);\n    }\n}\n\nfunction generateId() {\n    return crypto.randomBytes(16).toString('hex');\n}\n\nfunction validateEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n}\n\nfunction sanitizeString(str, maxLength = 1000) {\n    if (typeof str !== 'string') return '';\n    return str.trim().substring(0, maxLength);\n}\n\nfunction createResponse(data, status = 'success') {\n    return {\n        status,\n        timestamp: new Date().toISOString(),\n        data\n    };\n}\n\nfunction createErrorResponse(message, code = 'error') {\n    return createResponse({ error: message, code }, 'error');\n}\n\nfunction asyncDelay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nclass RateLimiter {\n    constructor(maxRequests = 10, windowMs = 60000) {\n        this.maxRequests = maxRequests;\n        this.windowMs = windowMs;\n        this.requests = new Map();\n    }\n    \n    isAllowed(identifier) {\n        const now = Date.now();\n        const userRequests = this.requests.get(identifier) || [];\n        \n        // Remove old requests outside the window\n        const validRequests = userRequests.filter(time => now - time < this.windowMs);\n        \n        if (validRequests.length >= this.maxRequests) {\n            return false;\n        }\n        \n        validRequests.push(now);\n        this.requests.set(identifier, validRequests);\n        return true;\n    }\n}\n\nmodule.exports = {\n    Logger,\n    generateId,\n    validateEmail,\n    sanitizeString,\n    createResponse,\n    createErrorResponse,\n    asyncDelay,\n    RateLimiter\n};\n\nconsole.log('✓ utils.js validated and saved');"
      }
    }
  },
  {
    "jsonrpc": "2.0",
    "id": 2,
    "method": "tools/call",
    "params": {
      "name": "validate_code",
      "arguments": {
        "language": "javascript",
        "filename": "database.js",
        "save": true,
        "session_id": "js-microservice",
        "code": "// In-memory database for our Node.js microservice\nconst { generateId, Logger } = require('./utils');\n\nclass MemoryDatabase {\n    constructor() {\n        this.users = new Map();\n        this.posts = new Map();\n        this.sessions = new Map();\n        this.logger = new Logger('Database');\n    }\n    \n    // User operations\n    async createUser(userData) {\n        const user = {\n            id: generateId(),\n            username: userData.username,\n            email: userData.email,\n            createdAt: new Date().toISOString(),\n            active: true\n        };\n        \n        this.users.set(user.id, user);\n        this.logger.info(`User created: ${user.username} (${user.id})`);\n        return user;\n    }\n    \n    async getUserById(id) {\n        return this.users.get(id) || null;\n    }\n    \n    async getUserByUsername(username) {\n        for (const user of this.users.values()) {\n            if (user.username === username) {\n                return user;\n            }\n        }\n        return null;\n    }\n    \n    async getAllUsers() {\n        return Array.from(this.users.values());\n    }\n    \n    async updateUser(id, updates) {\n        const user = this.users.get(id);\n        if (!user) return null;\n        \n        const updatedUser = { ...user, ...updates, id };\n        this.users.set(id, updatedUser);\n        this.logger.info(`User updated: ${id}`);\n        return updatedUser;\n    }\n    \n    async deleteUser(id) {\n        const deleted = this.users.delete(id);\n        if (deleted) {\n            this.logger.info(`User deleted: ${id}`);\n            // Also delete user's posts\n            for (const [postId, post] of this.posts.entries()) {\n                if (post.authorId === id) {\n                    this.posts.delete(postId);\n                }\n            }\n        }\n        return deleted;\n    }\n    \n    // Post operations\n    async createPost(postData) {\n        const post = {\n            id: generateId(),\n            title: postData.title,\n            content: postData.content,\n            authorId: postData.authorId,\n            createdAt: new Date().toISOString(),\n            published: postData.published || false,\n            tags: postData.tags || []\n        };\n        \n        this.posts.set(post.id, post);\n        this.logger.info(`Post created: ${post.title} (${post.id})`);\n        return post;\n    }\n    \n    async getPostById(id) {\n        return this.posts.get(id) || null;\n    }\n    \n    async getPostsByAuthor(authorId) {\n        const posts = [];\n        for (const post of this.posts.values()) {\n            if (post.authorId === authorId) {\n                posts.push(post);\n            }\n        }\n        return posts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n    }\n    \n    async getAllPosts(published = null) {\n        let posts = Array.from(this.posts.values());\n        \n        if (published !== null) {\n            posts = posts.filter(post => post.published === published);\n        }\n        \n        return posts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n    }\n    \n    async updatePost(id, updates) {\n        const post = this.posts.get(id);\n        if (!post) return null;\n        \n        const updatedPost = { ...post, ...updates, id };\n        this.posts.set(id, updatedPost);\n        this.logger.info(`Post updated: ${id}`);\n        return updatedPost;\n    }\n    \n    async deletePost(id) {\n        const deleted = this.posts.delete(id);\n        if (deleted) {\n            this.logger.info(`Post deleted: ${id}`);\n        }\n        return deleted;\n    }\n    \n    // Session operations\n    async createSession(userId) {\n        const session = {\n            id: generateId(),\n            userId,\n            createdAt: new Date().toISOString(),\n            lastAccessed: new Date().toISOString()\n        };\n        \n        this.sessions.set(session.id, session);\n        this.logger.info(`Session created: ${session.id} for user ${userId}`);\n        return session;\n    }\n    \n    async getSession(sessionId) {\n        const session = this.sessions.get(sessionId);\n        if (session) {\n            session.lastAccessed = new Date().toISOString();\n            this.sessions.set(sessionId, session);\n        }\n        return session || null;\n    }\n    \n    async deleteSession(sessionId) {\n        const deleted = this.sessions.delete(sessionId);\n        if (deleted) {\n            this.logger.info(`Session deleted: ${sessionId}`);\n        }\n        return deleted;\n    }\n    \n    // Stats\n    getStats() {\n        return {\n            users: this.users.size,\n            posts: this.posts.size,\n            publishedPosts: Array.from(this.posts.values()).filter(p => p.published).length,\n            sessions: this.sessions.size\n        };\n    }\n}\n\nmodule.exports = MemoryDatabase;\n\nconsole.log('✓ database.js validated and saved');"
      }
    }
  },
  {
    "jsonrpc": "2.0",
    "id": 3,
    "method": "tools/call",
    "params": {
      "name": "validate_code",
      "arguments": {
        "language": "javascript",
        "filename": "api.js",
        "save": true,
        "session_id": "js-microservice",
        "code": "// API routes for our Node.js microservice\nconst { Logger, validateEmail, sanitizeString, createResponse, createErrorResponse, RateLimiter } = require('./utils');\nconst MemoryDatabase = require('./database');\n\nclass UserAPI {\n    constructor(database) {\n        this.db = database;\n        this.logger = new Logger('UserAPI');\n        this.rateLimiter = new RateLimiter(5, 60000); // 5 requests per minute\n    }\n    \n    async createUser(requestData, clientId = 'default') {\n        try {\n            if (!this.rateLimiter.isAllowed(clientId)) {\n                return createErrorResponse('Rate limit exceeded', 'rate_limit');\n            }\n            \n            const { username, email } = requestData;\n            \n            if (!username || !email) {\n                return createErrorResponse('Username and email are required');\n            }\n            \n            const cleanUsername = sanitizeString(username, 50);\n            const cleanEmail = sanitizeString(email, 100);\n            \n            if (!validateEmail(cleanEmail)) {\n                return createErrorResponse('Invalid email format');\n            }\n            \n            // Check if username already exists\n            const existingUser = await this.db.getUserByUsername(cleanUsername);\n            if (existingUser) {\n                return createErrorResponse('Username already exists', 'conflict');\n            }\n            \n            const user = await this.db.createUser({\n                username: cleanUsername,\n                email: cleanEmail\n            });\n            \n            this.logger.info(`User created: ${user.username}`);\n            return createResponse(user);\n            \n        } catch (error) {\n            this.logger.error(`Failed to create user: ${error.message}`);\n            return createErrorResponse('Failed to create user');\n        }\n    }\n    \n    async getUser(userId) {\n        try {\n            const user = await this.db.getUserById(userId);\n            if (!user) {\n                return createErrorResponse('User not found', 'not_found');\n            }\n            return createResponse(user);\n        } catch (error) {\n            this.logger.error(`Failed to get user: ${error.message}`);\n            return createErrorResponse('Failed to get user');\n        }\n    }\n    \n    async listUsers() {\n        try {\n            const users = await this.db.getAllUsers();\n            return createResponse({ users, count: users.length });\n        } catch (error) {\n            this.logger.error(`Failed to list users: ${error.message}`);\n            return createErrorResponse('Failed to list users');\n        }\n    }\n}\n\nclass PostAPI {\n    constructor(database) {\n        this.db = database;\n        this.logger = new Logger('PostAPI');\n        this.rateLimiter = new RateLimiter(10, 60000); // 10 requests per minute\n    }\n    \n    async createPost(requestData, clientId = 'default') {\n        try {\n            if (!this.rateLimiter.isAllowed(clientId)) {\n                return createErrorResponse('Rate limit exceeded', 'rate_limit');\n            }\n            \n            const { title, content, authorId, published, tags } = requestData;\n            \n            if (!title || !content || !authorId) {\n                return createErrorResponse('Title, content, and authorId are required');\n            }\n            \n            // Verify author exists\n            const author = await this.db.getUserById(authorId);\n            if (!author) {\n                return createErrorResponse('Author not found', 'not_found');\n            }\n            \n            const post = await this.db.createPost({\n                title: sanitizeString(title, 200),\n                content: sanitizeString(content, 10000),\n                authorId,\n                published: published || false,\n                tags: Array.isArray(tags) ? tags.map(tag => sanitizeString(tag, 50)) : []\n            });\n            \n            this.logger.info(`Post created: ${post.title}`);\n            return createResponse(post);\n            \n        } catch (error) {\n            this.logger.error(`Failed to create post: ${error.message}`);\n            return createErrorResponse('Failed to create post');\n        }\n    }\n    \n    async getPost(postId) {\n        try {\n            const post = await this.db.getPostById(postId);\n            if (!post) {\n                return createErrorResponse('Post not found', 'not_found');\n            }\n            \n            // Get author info\n            const author = await this.db.getUserById(post.authorId);\n            const enrichedPost = {\n                ...post,\n                author: author ? { username: author.username, id: author.id } : null\n            };\n            \n            return createResponse(enrichedPost);\n        } catch (error) {\n            this.logger.error(`Failed to get post: ${error.message}`);\n            return createErrorResponse('Failed to get post');\n        }\n    }\n    \n    async getUserPosts(authorId) {\n        try {\n            const posts = await this.db.getPostsByAuthor(authorId);\n            return createResponse({ posts, count: posts.length });\n        } catch (error) {\n            this.logger.error(`Failed to get user posts: ${error.message}`);\n            return createErrorResponse('Failed to get user posts');\n        }\n    }\n    \n    async listPosts(published = null) {\n        try {\n            const posts = await this.db.getAllPosts(published);\n            return createResponse({ posts, count: posts.length });\n        } catch (error) {\n            this.logger.error(`Failed to list posts: ${error.message}`);\n            return createErrorResponse('Failed to list posts');\n        }\n    }\n}\n\nmodule.exports = { UserAPI, PostAPI };\n\nconsole.log('✓ api.js validated and saved');"
      }
    }
  },
  {
    "jsonrpc": "2.0",
    "id": 4,
    "method": "tools/call",
    "params": {
      "name": "execute_code",
      "arguments": {
        "language": "javascript",
        "filename": "server.js",
        "save": true,
        "session_id": "js-microservice",
        "code": "#!/usr/bin/env node\n// Main server file for our Node.js microservice\n\nconsole.log('=== MULTI-FILE NODE.JS MICROSERVICE DEMO ===');\nconsole.log();\n\n// Import our custom modules\ntry {\n    const { Logger, asyncDelay } = require('./utils');\n    const MemoryDatabase = require('./database');\n    const { UserAPI, PostAPI } = require('./api');\n    console.log('✓ All modules imported successfully');\n} catch (error) {\n    console.log('✗ Module import failed:', error.message);\n    console.log('Make sure all files were saved to the session');\n    process.exit(1);\n}\n\nconst { Logger, asyncDelay } = require('./utils');\nconst MemoryDatabase = require('./database');\nconst { UserAPI, PostAPI } = require('./api');\n\nclass MicroService {\n    constructor() {\n        this.logger = new Logger('MicroService');\n        this.database = new MemoryDatabase();\n        this.userAPI = new UserAPI(this.database);\n        this.postAPI = new PostAPI(this.database);\n    }\n    \n    async start() {\n        this.logger.info('Starting microservice...');\n        \n        // Simulate startup delay\n        await asyncDelay(100);\n        \n        this.logger.info('Microservice started successfully');\n        return this;\n    }\n    \n    async handleRequest(method, endpoint, data = {}, clientId = 'demo-client') {\n        this.logger.info(`${method} ${endpoint}`);\n        \n        try {\n            switch (endpoint) {\n                case '/users':\n                    if (method === 'POST') {\n                        return await this.userAPI.createUser(data, clientId);\n                    } else if (method === 'GET') {\n                        return await this.userAPI.listUsers();\n                    }\n                    break;\n                    \n                case '/users/:id':\n                    if (method === 'GET') {\n                        return await this.userAPI.getUser(data.id);\n                    }\n                    break;\n                    \n                case '/posts':\n                    if (method === 'POST') {\n                        return await this.postAPI.createPost(data, clientId);\n                    } else if (method === 'GET') {\n                        return await this.postAPI.listPosts(data.published);\n                    }\n                    break;\n                    \n                case '/posts/:id':\n                    if (method === 'GET') {\n                        return await this.postAPI.getPost(data.id);\n                    }\n                    break;\n                    \n                case '/users/:id/posts':\n                    if (method === 'GET') {\n                        return await this.postAPI.getUserPosts(data.id);\n                    }\n                    break;\n                    \n                case '/stats':\n                    if (method === 'GET') {\n                        const stats = this.database.getStats();\n                        return { status: 'success', timestamp: new Date().toISOString(), data: stats };\n                    }\n                    break;\n                    \n                default:\n                    return {\n                        status: 'error',\n                        timestamp: new Date().toISOString(),\n                        data: { error: 'Endpoint not found', code: 'not_found' }\n                    };\n            }\n        } catch (error) {\n            this.logger.error(`Request failed: ${error.message}`);\n            return {\n                status: 'error',\n                timestamp: new Date().toISOString(),\n                data: { error: 'Internal server error', code: 'internal_error' }\n            };\n        }\n    }\n}\n\n// Demo the microservice\nasync function runDemo() {\n    console.log('=== INITIALIZING MICROSERVICE ===');\n    const service = await new MicroService().start();\n    \n    console.log();\n    console.log('=== TESTING USER ENDPOINTS ===');\n    \n    // Create users\n    let response = await service.handleRequest('POST', '/users', {\n        username: 'alice',\n        email: 'alice@example.com'\n    });\n    console.log('Create user Alice:', JSON.stringify(response, null, 2));\n    const aliceId = response.data.id;\n    \n    response = await service.handleRequest('POST', '/users', {\n        username: 'bob',\n        email: 'bob@example.com'\n    });\n    console.log('\\nCreate user Bob:', JSON.stringify(response, null, 2));\n    const bobId = response.data.id;\n    \n    // List users\n    response = await service.handleRequest('GET', '/users');\n    console.log('\\nList users:', JSON.stringify(response, null, 2));\n    \n    console.log('\\n=== TESTING POST ENDPOINTS ===');\n    \n    // Create posts\n    response = await service.handleRequest('POST', '/posts', {\n        title: 'My First Microservice',\n        content: 'Building microservices with Node.js is fun!',\n        authorId: aliceId,\n        published: true,\n        tags: ['nodejs', 'microservices']\n    });\n    console.log('Create post 1:', JSON.stringify(response, null, 2));\n    const post1Id = response.data.id;\n    \n    response = await service.handleRequest('POST', '/posts', {\n        title: 'JavaScript Best Practices',\n        content: 'Here are some tips for writing better JavaScript code...',\n        authorId: bobId,\n        published: true,\n        tags: ['javascript', 'best-practices']\n    });\n    console.log('\\nCreate post 2:', JSON.stringify(response, null, 2));\n    \n    // Get specific post\n    response = await service.handleRequest('GET', '/posts/:id', { id: post1Id });\n    console.log('\\nGet post by ID:', JSON.stringify(response, null, 2));\n    \n    // Get user posts\n    response = await service.handleRequest('GET', '/users/:id/posts', { id: aliceId });\n    console.log('\\nGet Alice\\'s posts:', JSON.stringify(response, null, 2));\n    \n    console.log('\\n=== TESTING STATS ENDPOINT ===');\n    response = await service.handleRequest('GET', '/stats');\n    console.log('Service stats:', JSON.stringify(response, null, 2));\n    \n    console.log('\\n=== TESTING ERROR HANDLING ===');\n    \n    // Test invalid endpoint\n    response = await service.handleRequest('GET', '/invalid');\n    console.log('Invalid endpoint:', JSON.stringify(response, null, 2));\n    \n    // Test invalid user creation\n    response = await service.handleRequest('POST', '/users', {\n        username: '',\n        email: 'invalid-email'\n    });\n    console.log('\\nInvalid user:', JSON.stringify(response, null, 2));\n    \n    console.log('\\n=== MICROSERVICE DEMO COMPLETED ===');\n    console.log('\\n✅ Multi-file Node.js microservice demo completed!');\n    console.log('🔄 All files persist within this container session');\n    console.log('🗑️  Files will be cleaned up when container restarts');\n    console.log('🔒 Host system remains completely isolated');\n}\n\n// Run the demo\nrunDemo().catch(console.error);"
      }
    }
  }
]