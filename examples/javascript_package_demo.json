{
  "jsonrpc": "2.0",
  "id": 1,
  "method": "tools/call",
  "params": {
    "name": "execute_code",
    "arguments": {
      "language": "javascript",
      "code": "const { execSync } = require('child_process');\nconst fs = require('fs');\nconst path = require('path');\n\nconsole.log('=== JAVASCRIPT/NODE.JS PACKAGE DEMO ===');\n\nif (!fs.existsSync('package.json')) {\n    const packageJson = {\n        name: 'sandbox-demo',\n        version: '1.0.0'\n    };\n    fs.writeFileSync('package.json', JSON.stringify(packageJson, null, 2));\n    console.log('✓ Created package.json');\n}\n\nconst packages = ['axios', 'lodash', 'moment', 'chalk'];\n\nconsole.log('\\nInstalling packages...');\npackages.forEach(pkg => {\n    try {\n        execSync(`npm install ${pkg} --silent`, { stdio: 'pipe' });\n        console.log(`✓ ${pkg} installed`);\n    } catch (error) {\n        console.log(`✗ ${pkg} failed: ${error.message}`);\n    }\n});\n\nconsole.log('\\n=== TESTING INSTALLED PACKAGES ===');\n\ntry {\n    const axios = require('axios');\n    console.log('✓ axios: Successfully imported HTTP client');\n    \n    axios.get('https://httpbin.org/json')\n        .then(response => {\n            console.log(`✓ axios: HTTP ${response.status} from httpbin.org`);\n        })\n        .catch(err => {\n            console.log(`✗ axios HTTP request failed: ${err.message}`);\n        });\n} catch (error) {\n    console.log(`✗ axios import failed: ${error.message}`);\n}\n\ntry {\n    const _ = require('lodash');\n    const numbers = [1, 2, 3, 4, 5];\n    const sum = _.sum(numbers);\n    console.log(`✓ lodash: Sum of [1,2,3,4,5] = ${sum}`);\n} catch (error) {\n    console.log(`✗ lodash failed: ${error.message}`);\n}\n\ntry {\n    const moment = require('moment');\n    const now = moment().format('YYYY-MM-DD HH:mm:ss');\n    console.log(`✓ moment: Current time formatted: ${now}`);\n} catch (error) {\n    console.log(`✗ moment failed: ${error.message}`);\n}\n\ntry {\n    const chalk = require('chalk');\n    console.log(chalk.green('✓ chalk: ') + chalk.blue('Colorful text formatting works!'));\n} catch (error) {\n    console.log(`✗ chalk failed: ${error.message}`);\n}\n\nconsole.log('\\n=== SUMMARY ===');\ntry {\n    const nodeModulesPath = path.resolve('node_modules');\n    const installedPackages = fs.readdirSync('node_modules')\n        .filter(name => !name.startsWith('.'))\n        .slice(0, 10);\n    \n    console.log(`Packages installed in: ${nodeModulesPath}`);\n    console.log(`Sample packages: ${installedPackages.join(', ')}`);\n} catch (error) {\n    console.log('Could not read node_modules directory');\n}\n\nconsole.log('Container isolation ensures host system safety');"
    }
  }
}