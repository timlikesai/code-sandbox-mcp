{
  "description": "Demonstrates automatic session management - the binary search example now works without any session management!",
  "requests": [
    {
      "comment": "First request: Define the binary_search function - automatically saved to default Python session",
      "jsonrpc": "2.0",
      "id": 1,
      "method": "tools/call",
      "params": {
        "name": "execute_code",
        "arguments": {
          "language": "python",
          "code": "def binary_search(arr, target):\n    \"\"\"\n    Perform binary search on a sorted array to find the index of target.\n    If target is not found, return -1.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1\n\nprint('Binary search function defined!')"
        }
      }
    },
    {
      "comment": "Second request: Use the function - it's automatically available!",
      "jsonrpc": "2.0",
      "id": 2,
      "method": "tools/call",
      "params": {
        "name": "execute_code",
        "arguments": {
          "language": "python",
          "code": "# Test the binary_search function\ntest_array = [1, 3, 5, 7, 9, 11, 13, 15]\ntarget = 7\n\nresult = binary_search(test_array, target)\nprint(f\"Array: {test_array}\")\nprint(f\"Target: {target}\")\nprint(f\"Found at index: {result}\")\n\n# Verify it's correct\nif result != -1:\n    print(f\"Value at index {result}: {test_array[result]}\")"
        }
      }
    },
    {
      "comment": "Third request: Define a test function that uses binary_search",
      "jsonrpc": "2.0",
      "id": 3,
      "method": "tools/call",
      "params": {
        "name": "execute_code",
        "arguments": {
          "language": "python",
          "code": "def test_binary_search():\n    test_cases = [\n        ([1, 2, 3, 4, 5], 3, 2),\n        ([1, 2, 3, 4, 5], 1, 0),\n        ([1, 2, 3, 4, 5], 5, 4),\n        ([1, 2, 3, 4, 5], 6, -1),\n        ([], 1, -1),\n        ([1], 1, 0),\n        ([1], 2, -1)\n    ]\n    \n    print(\"Running binary search tests...\")\n    passed = 0\n    \n    for i, (arr, target, expected) in enumerate(test_cases):\n        result = binary_search(arr, target)\n        status = \"PASS\" if result == expected else \"FAIL\"\n        print(f\"Test {i+1}: {status} - Array: {arr}, Target: {target}\")\n        if result == expected:\n            passed += 1\n    \n    print(f\"\\nTests passed: {passed}/{len(test_cases)}\")\n    return passed == len(test_cases)\n\n# Run the tests\ntest_binary_search()"
        }
      }
    },
    {
      "comment": "Fourth request: Meanwhile, JavaScript has its own separate session",
      "jsonrpc": "2.0",
      "id": 4,
      "method": "tools/call",
      "params": {
        "name": "execute_code",
        "arguments": {
          "language": "javascript",
          "code": "// JavaScript has its own session - no Python code here!\nfunction factorial(n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n\nconsole.log('Factorial function defined in JavaScript session');"
        }
      }
    },
    {
      "comment": "Fifth request: Use JavaScript function - separate from Python",
      "jsonrpc": "2.0",
      "id": 5,
      "method": "tools/call",
      "params": {
        "name": "execute_code",
        "arguments": {
          "language": "javascript",
          "code": "// Test factorial\nfor (let i = 0; i <= 5; i++) {\n    console.log(`${i}! = ${factorial(i)}`);\n}"
        }
      }
    },
    {
      "comment": "Sixth request: Reset Python session",
      "jsonrpc": "2.0",
      "id": 6,
      "method": "tools/call",
      "params": {
        "name": "reset_session",
        "arguments": {
          "language": "python"
        }
      }
    },
    {
      "comment": "Seventh request: Try to use binary_search after reset - it's gone!",
      "jsonrpc": "2.0",
      "id": 7,
      "method": "tools/call",
      "params": {
        "name": "execute_code",
        "arguments": {
          "language": "python",
          "code": "# This will fail because we reset the Python session\ntry:\n    result = binary_search([1, 2, 3], 2)\n    print(f\"Found: {result}\")\nexcept NameError as e:\n    print(f\"Error: {e}\")\n    print(\"The function is no longer available after reset!\")"
        }
      }
    },
    {
      "comment": "Eighth request: JavaScript session is unaffected by Python reset",
      "jsonrpc": "2.0",
      "id": 8,
      "method": "tools/call",
      "params": {
        "name": "execute_code",
        "arguments": {
          "language": "javascript",
          "code": "// JavaScript session still has its function\nconsole.log(`10! = ${factorial(10)}`);"
        }
      }
    }
  ]
}