[
  {
    "jsonrpc": "2.0",
    "id": 1,
    "method": "tools/call",
    "params": {
      "name": "validate_code",
      "arguments": {
        "language": "java",
        "filename": "interfaces/Repository.java",
        "save": true,
        "session_id": "java-ecommerce",
        "code": "package interfaces;\n\nimport java.util.List;\nimport java.util.Optional;\n\n/**\n * Generic repository interface for data access operations\n * @param <T> The entity type\n * @param <ID> The ID type\n */\npublic interface Repository<T, ID> {\n    /**\n     * Save an entity\n     * @param entity The entity to save\n     * @return The saved entity\n     */\n    T save(T entity);\n    \n    /**\n     * Find an entity by ID\n     * @param id The entity ID\n     * @return Optional containing the entity if found\n     */\n    Optional<T> findById(ID id);\n    \n    /**\n     * Find all entities\n     * @return List of all entities\n     */\n    List<T> findAll();\n    \n    /**\n     * Delete an entity by ID\n     * @param id The entity ID\n     * @return true if deleted, false otherwise\n     */\n    boolean deleteById(ID id);\n    \n    /**\n     * Count total entities\n     * @return The count of entities\n     */\n    long count();\n    \n    /**\n     * Check if an entity exists by ID\n     * @param id The entity ID\n     * @return true if exists, false otherwise\n     */\n    default boolean existsById(ID id) {\n        return findById(id).isPresent();\n    }\n}\n\n// Validation marker\nclass RepositoryValidator {\n    public static void main(String[] args) {\n        System.out.println(\"✓ interfaces/Repository.java validated and saved\");\n    }\n}"
      }
    }
  },
  {
    "jsonrpc": "2.0",
    "id": 2,
    "method": "tools/call",
    "params": {
      "name": "validate_code",
      "arguments": {
        "language": "java",
        "filename": "interfaces/Service.java",
        "save": true,
        "session_id": "java-ecommerce",
        "code": "package interfaces;\n\nimport java.util.List;\nimport java.util.Optional;\nimport models.Order;\nimport models.Product;\n\n/**\n * Service interface for business logic operations\n */\npublic interface Service {\n    /**\n     * Product service interface\n     */\n    interface ProductService {\n        Product createProduct(String name, String description, double price, int quantity);\n        Optional<Product> getProduct(Long id);\n        List<Product> getAllProducts();\n        List<Product> getProductsInStock();\n        boolean updateStock(Long productId, int quantity);\n        boolean deleteProduct(Long id);\n        List<Product> searchProducts(String keyword);\n    }\n    \n    /**\n     * Order service interface\n     */\n    interface OrderService {\n        Order createOrder(String customerEmail);\n        Optional<Order> getOrder(Long id);\n        List<Order> getAllOrders();\n        List<Order> getOrdersByCustomer(String customerEmail);\n        boolean addItemToOrder(Long orderId, Long productId, int quantity) throws Exception;\n        boolean completeOrder(Long orderId) throws Exception;\n        boolean cancelOrder(Long orderId) throws Exception;\n        double calculateOrderTotal(Long orderId);\n    }\n    \n    /**\n     * Inventory service interface\n     */\n    interface InventoryService {\n        boolean checkAvailability(Long productId, int quantity);\n        void reserveStock(Long productId, int quantity) throws Exception;\n        void releaseStock(Long productId, int quantity);\n        List<Product> getLowStockProducts(int threshold);\n    }\n}\n\n// Validation marker\nclass ServiceValidator {\n    public static void main(String[] args) {\n        System.out.println(\"✓ interfaces/Service.java validated and saved\");\n    }\n}"
      }
    }
  },
  {
    "jsonrpc": "2.0",
    "id": 3,
    "method": "tools/call",
    "params": {
      "name": "validate_code",
      "arguments": {
        "language": "java",
        "filename": "models/Product.java",
        "save": true,
        "session_id": "java-ecommerce",
        "code": "package models;\n\nimport java.time.LocalDateTime;\nimport java.util.Objects;\n\n/**\n * Product entity with annotations and builder pattern\n */\npublic class Product {\n    private Long id;\n    private String name;\n    private String description;\n    private double price;\n    private int stockQuantity;\n    private ProductStatus status;\n    private LocalDateTime createdAt;\n    private LocalDateTime updatedAt;\n    \n    /**\n     * Product status enum\n     */\n    public enum ProductStatus {\n        ACTIVE(\"Active\"),\n        INACTIVE(\"Inactive\"),\n        OUT_OF_STOCK(\"Out of Stock\"),\n        DISCONTINUED(\"Discontinued\");\n        \n        private final String displayName;\n        \n        ProductStatus(String displayName) {\n            this.displayName = displayName;\n        }\n        \n        public String getDisplayName() {\n            return displayName;\n        }\n    }\n    \n    // Constructor\n    public Product(Long id, String name, String description, double price, int stockQuantity) {\n        this.id = id;\n        this.name = name;\n        this.description = description;\n        this.price = price;\n        this.stockQuantity = stockQuantity;\n        this.status = stockQuantity > 0 ? ProductStatus.ACTIVE : ProductStatus.OUT_OF_STOCK;\n        this.createdAt = LocalDateTime.now();\n        this.updatedAt = LocalDateTime.now();\n    }\n    \n    // Builder pattern\n    public static class Builder {\n        private Long id;\n        private String name;\n        private String description;\n        private double price;\n        private int stockQuantity;\n        \n        public Builder id(Long id) {\n            this.id = id;\n            return this;\n        }\n        \n        public Builder name(String name) {\n            this.name = name;\n            return this;\n        }\n        \n        public Builder description(String description) {\n            this.description = description;\n            return this;\n        }\n        \n        public Builder price(double price) {\n            this.price = price;\n            return this;\n        }\n        \n        public Builder stockQuantity(int stockQuantity) {\n            this.stockQuantity = stockQuantity;\n            return this;\n        }\n        \n        public Product build() {\n            return new Product(id, name, description, price, stockQuantity);\n        }\n    }\n    \n    // Getters and setters\n    public Long getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n    \n    public String getName() { return name; }\n    public void setName(String name) { \n        this.name = name;\n        this.updatedAt = LocalDateTime.now();\n    }\n    \n    public String getDescription() { return description; }\n    public void setDescription(String description) { \n        this.description = description;\n        this.updatedAt = LocalDateTime.now();\n    }\n    \n    public double getPrice() { return price; }\n    public void setPrice(double price) { \n        this.price = price;\n        this.updatedAt = LocalDateTime.now();\n    }\n    \n    public int getStockQuantity() { return stockQuantity; }\n    public void setStockQuantity(int stockQuantity) {\n        this.stockQuantity = stockQuantity;\n        this.status = stockQuantity > 0 ? ProductStatus.ACTIVE : ProductStatus.OUT_OF_STOCK;\n        this.updatedAt = LocalDateTime.now();\n    }\n    \n    public ProductStatus getStatus() { return status; }\n    public void setStatus(ProductStatus status) { \n        this.status = status;\n        this.updatedAt = LocalDateTime.now();\n    }\n    \n    public LocalDateTime getCreatedAt() { return createdAt; }\n    public LocalDateTime getUpdatedAt() { return updatedAt; }\n    \n    // Business methods\n    public boolean isInStock() {\n        return stockQuantity > 0 && status == ProductStatus.ACTIVE;\n    }\n    \n    public void adjustStock(int adjustment) {\n        this.stockQuantity += adjustment;\n        if (this.stockQuantity < 0) {\n            this.stockQuantity = 0;\n        }\n        this.status = stockQuantity > 0 ? ProductStatus.ACTIVE : ProductStatus.OUT_OF_STOCK;\n        this.updatedAt = LocalDateTime.now();\n    }\n    \n    @Override\n    public String toString() {\n        return String.format(\"Product[id=%d, name='%s', price=%.2f, stock=%d, status=%s]\",\n                id, name, price, stockQuantity, status.getDisplayName());\n    }\n    \n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Product product = (Product) o;\n        return Objects.equals(id, product.id);\n    }\n    \n    @Override\n    public int hashCode() {\n        return Objects.hash(id);\n    }\n}\n\n// Validation marker\nclass ProductValidator {\n    public static void main(String[] args) {\n        System.out.println(\"✓ models/Product.java validated and saved\");\n    }\n}"
      }
    }
  },
  {
    "jsonrpc": "2.0",
    "id": 4,
    "method": "tools/call",
    "params": {
      "name": "validate_code",
      "arguments": {
        "language": "java",
        "filename": "models/Order.java",
        "save": true,
        "session_id": "java-ecommerce",
        "code": "package models;\n\nimport java.time.LocalDateTime;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n/**\n * Order entity with order items and status tracking\n */\npublic class Order {\n    private Long id;\n    private String customerEmail;\n    private OrderStatus status;\n    private List<OrderItem> items;\n    private LocalDateTime createdAt;\n    private LocalDateTime completedAt;\n    \n    /**\n     * Order status enum\n     */\n    public enum OrderStatus {\n        PENDING(\"Pending\"),\n        PROCESSING(\"Processing\"),\n        COMPLETED(\"Completed\"),\n        CANCELLED(\"Cancelled\"),\n        REFUNDED(\"Refunded\");\n        \n        private final String displayName;\n        \n        OrderStatus(String displayName) {\n            this.displayName = displayName;\n        }\n        \n        public String getDisplayName() {\n            return displayName;\n        }\n        \n        public boolean isActive() {\n            return this == PENDING || this == PROCESSING;\n        }\n    }\n    \n    /**\n     * Order item nested class\n     */\n    public static class OrderItem {\n        private Long productId;\n        private String productName;\n        private double unitPrice;\n        private int quantity;\n        \n        public OrderItem(Long productId, String productName, double unitPrice, int quantity) {\n            this.productId = productId;\n            this.productName = productName;\n            this.unitPrice = unitPrice;\n            this.quantity = quantity;\n        }\n        \n        public double getSubtotal() {\n            return unitPrice * quantity;\n        }\n        \n        // Getters\n        public Long getProductId() { return productId; }\n        public String getProductName() { return productName; }\n        public double getUnitPrice() { return unitPrice; }\n        public int getQuantity() { return quantity; }\n        \n        @Override\n        public String toString() {\n            return String.format(\"%s x%d @ $%.2f = $%.2f\", \n                    productName, quantity, unitPrice, getSubtotal());\n        }\n    }\n    \n    // Constructor\n    public Order(Long id, String customerEmail) {\n        this.id = id;\n        this.customerEmail = customerEmail;\n        this.status = OrderStatus.PENDING;\n        this.items = new ArrayList<>();\n        this.createdAt = LocalDateTime.now();\n    }\n    \n    // Business methods\n    public void addItem(Product product, int quantity) {\n        // Check if item already exists\n        Optional<OrderItem> existingItem = items.stream()\n                .filter(item -> item.getProductId().equals(product.getId()))\n                .findFirst();\n        \n        if (existingItem.isPresent()) {\n            // Update quantity of existing item\n            OrderItem item = existingItem.get();\n            items.remove(item);\n            items.add(new OrderItem(product.getId(), product.getName(), \n                    product.getPrice(), item.getQuantity() + quantity));\n        } else {\n            // Add new item\n            items.add(new OrderItem(product.getId(), product.getName(), \n                    product.getPrice(), quantity));\n        }\n    }\n    \n    public boolean removeItem(Long productId) {\n        return items.removeIf(item -> item.getProductId().equals(productId));\n    }\n    \n    public double calculateTotal() {\n        return items.stream()\n                .mapToDouble(OrderItem::getSubtotal)\n                .sum();\n    }\n    \n    public Map<Long, Integer> getProductQuantities() {\n        return items.stream()\n                .collect(Collectors.toMap(\n                    OrderItem::getProductId,\n                    OrderItem::getQuantity\n                ));\n    }\n    \n    public void complete() {\n        if (status != OrderStatus.PENDING && status != OrderStatus.PROCESSING) {\n            throw new IllegalStateException(\"Cannot complete order in status: \" + status);\n        }\n        this.status = OrderStatus.COMPLETED;\n        this.completedAt = LocalDateTime.now();\n    }\n    \n    public void cancel() {\n        if (!status.isActive()) {\n            throw new IllegalStateException(\"Cannot cancel order in status: \" + status);\n        }\n        this.status = OrderStatus.CANCELLED;\n    }\n    \n    // Getters and setters\n    public Long getId() { return id; }\n    public void setId(Long id) { this.id = id; }\n    \n    public String getCustomerEmail() { return customerEmail; }\n    public void setCustomerEmail(String customerEmail) { this.customerEmail = customerEmail; }\n    \n    public OrderStatus getStatus() { return status; }\n    public void setStatus(OrderStatus status) { this.status = status; }\n    \n    public List<OrderItem> getItems() { return new ArrayList<>(items); }\n    \n    public LocalDateTime getCreatedAt() { return createdAt; }\n    public LocalDateTime getCompletedAt() { return completedAt; }\n    \n    @Override\n    public String toString() {\n        return String.format(\"Order[id=%d, customer='%s', status=%s, items=%d, total=$%.2f]\",\n                id, customerEmail, status.getDisplayName(), items.size(), calculateTotal());\n    }\n    \n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Order order = (Order) o;\n        return Objects.equals(id, order.id);\n    }\n    \n    @Override\n    public int hashCode() {\n        return Objects.hash(id);\n    }\n}\n\n// Validation marker\nclass OrderValidator {\n    public static void main(String[] args) {\n        System.out.println(\"✓ models/Order.java validated and saved\");\n    }\n}"
      }
    }
  },
  {
    "jsonrpc": "2.0",
    "id": 5,
    "method": "tools/call",
    "params": {
      "name": "validate_code",
      "arguments": {
        "language": "java",
        "filename": "services/ProductService.java",
        "save": true,
        "session_id": "java-ecommerce",
        "code": "package services;\n\nimport interfaces.Repository;\nimport interfaces.Service;\nimport models.Product;\nimport java.util.*;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.atomic.AtomicLong;\nimport java.util.stream.Collectors;\n\n/**\n * Product service implementation with in-memory repository\n */\npublic class ProductService implements Service.ProductService, Repository<Product, Long> {\n    private final Map<Long, Product> products = new ConcurrentHashMap<>();\n    private final AtomicLong idGenerator = new AtomicLong(1);\n    \n    // Repository implementation\n    @Override\n    public Product save(Product entity) {\n        if (entity.getId() == null) {\n            entity.setId(idGenerator.getAndIncrement());\n        }\n        products.put(entity.getId(), entity);\n        return entity;\n    }\n    \n    @Override\n    public Optional<Product> findById(Long id) {\n        return Optional.ofNullable(products.get(id));\n    }\n    \n    @Override\n    public List<Product> findAll() {\n        return new ArrayList<>(products.values());\n    }\n    \n    @Override\n    public boolean deleteById(Long id) {\n        return products.remove(id) != null;\n    }\n    \n    @Override\n    public long count() {\n        return products.size();\n    }\n    \n    // ProductService implementation\n    @Override\n    public Product createProduct(String name, String description, double price, int quantity) {\n        if (name == null || name.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Product name cannot be empty\");\n        }\n        if (price < 0) {\n            throw new IllegalArgumentException(\"Product price cannot be negative\");\n        }\n        if (quantity < 0) {\n            throw new IllegalArgumentException(\"Product quantity cannot be negative\");\n        }\n        \n        Product product = new Product.Builder()\n                .name(name)\n                .description(description)\n                .price(price)\n                .stockQuantity(quantity)\n                .build();\n        \n        return save(product);\n    }\n    \n    @Override\n    public Optional<Product> getProduct(Long id) {\n        return findById(id);\n    }\n    \n    @Override\n    public List<Product> getAllProducts() {\n        return findAll();\n    }\n    \n    @Override\n    public List<Product> getProductsInStock() {\n        return products.values().stream()\n                .filter(Product::isInStock)\n                .sorted(Comparator.comparing(Product::getName))\n                .collect(Collectors.toList());\n    }\n    \n    @Override\n    public boolean updateStock(Long productId, int quantity) {\n        Optional<Product> productOpt = findById(productId);\n        if (productOpt.isPresent()) {\n            Product product = productOpt.get();\n            product.setStockQuantity(quantity);\n            save(product);\n            return true;\n        }\n        return false;\n    }\n    \n    @Override\n    public boolean deleteProduct(Long id) {\n        return deleteById(id);\n    }\n    \n    @Override\n    public List<Product> searchProducts(String keyword) {\n        if (keyword == null || keyword.trim().isEmpty()) {\n            return findAll();\n        }\n        \n        String lowerKeyword = keyword.toLowerCase();\n        return products.values().stream()\n                .filter(p -> p.getName().toLowerCase().contains(lowerKeyword) ||\n                        (p.getDescription() != null && \n                         p.getDescription().toLowerCase().contains(lowerKeyword)))\n                .sorted(Comparator.comparing(Product::getName))\n                .collect(Collectors.toList());\n    }\n    \n    // Additional business methods\n    public List<Product> getProductsByPriceRange(double minPrice, double maxPrice) {\n        return products.values().stream()\n                .filter(p -> p.getPrice() >= minPrice && p.getPrice() <= maxPrice)\n                .sorted(Comparator.comparing(Product::getPrice))\n                .collect(Collectors.toList());\n    }\n    \n    public Map<Product.ProductStatus, Long> getProductCountByStatus() {\n        return products.values().stream()\n                .collect(Collectors.groupingBy(\n                    Product::getStatus,\n                    Collectors.counting()\n                ));\n    }\n    \n    public Optional<Product> getMostExpensiveProduct() {\n        return products.values().stream()\n                .max(Comparator.comparing(Product::getPrice));\n    }\n    \n    public double getTotalInventoryValue() {\n        return products.values().stream()\n                .mapToDouble(p -> p.getPrice() * p.getStockQuantity())\n                .sum();\n    }\n}\n\n// Validation marker\nclass ProductServiceValidator {\n    public static void main(String[] args) {\n        System.out.println(\"✓ services/ProductService.java validated and saved\");\n    }\n}"
      }
    }
  },
  {
    "jsonrpc": "2.0",
    "id": 6,
    "method": "tools/call",
    "params": {
      "name": "validate_code",
      "arguments": {
        "language": "java",
        "filename": "services/OrderService.java",
        "save": true,
        "session_id": "java-ecommerce",
        "code": "package services;\n\nimport interfaces.Repository;\nimport interfaces.Service;\nimport models.Order;\nimport models.Product;\nimport java.util.*;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.atomic.AtomicLong;\nimport java.util.stream.Collectors;\n\n/**\n * Order service implementation with inventory management\n */\npublic class OrderService implements Service.OrderService, Service.InventoryService, Repository<Order, Long> {\n    private final Map<Long, Order> orders = new ConcurrentHashMap<>();\n    private final AtomicLong idGenerator = new AtomicLong(1);\n    private final ProductService productService;\n    \n    // Constructor\n    public OrderService(ProductService productService) {\n        this.productService = productService;\n    }\n    \n    // Repository implementation\n    @Override\n    public Order save(Order entity) {\n        if (entity.getId() == null) {\n            entity.setId(idGenerator.getAndIncrement());\n        }\n        orders.put(entity.getId(), entity);\n        return entity;\n    }\n    \n    @Override\n    public Optional<Order> findById(Long id) {\n        return Optional.ofNullable(orders.get(id));\n    }\n    \n    @Override\n    public List<Order> findAll() {\n        return new ArrayList<>(orders.values());\n    }\n    \n    @Override\n    public boolean deleteById(Long id) {\n        return orders.remove(id) != null;\n    }\n    \n    @Override\n    public long count() {\n        return orders.size();\n    }\n    \n    // OrderService implementation\n    @Override\n    public Order createOrder(String customerEmail) {\n        if (customerEmail == null || !customerEmail.contains(\"@\")) {\n            throw new IllegalArgumentException(\"Invalid customer email\");\n        }\n        \n        Order order = new Order(null, customerEmail);\n        return save(order);\n    }\n    \n    @Override\n    public Optional<Order> getOrder(Long id) {\n        return findById(id);\n    }\n    \n    @Override\n    public List<Order> getAllOrders() {\n        return findAll();\n    }\n    \n    @Override\n    public List<Order> getOrdersByCustomer(String customerEmail) {\n        return orders.values().stream()\n                .filter(o -> o.getCustomerEmail().equalsIgnoreCase(customerEmail))\n                .sorted(Comparator.comparing(Order::getCreatedAt).reversed())\n                .collect(Collectors.toList());\n    }\n    \n    @Override\n    public boolean addItemToOrder(Long orderId, Long productId, int quantity) throws Exception {\n        Optional<Order> orderOpt = findById(orderId);\n        Optional<Product> productOpt = productService.findById(productId);\n        \n        if (!orderOpt.isPresent()) {\n            throw new NoSuchElementException(\"Order not found: \" + orderId);\n        }\n        if (!productOpt.isPresent()) {\n            throw new NoSuchElementException(\"Product not found: \" + productId);\n        }\n        \n        Order order = orderOpt.get();\n        Product product = productOpt.get();\n        \n        if (!order.getStatus().isActive()) {\n            throw new IllegalStateException(\"Cannot modify order in status: \" + order.getStatus());\n        }\n        \n        if (!checkAvailability(productId, quantity)) {\n            throw new IllegalStateException(\"Insufficient stock for product: \" + product.getName());\n        }\n        \n        // Reserve the stock\n        reserveStock(productId, quantity);\n        \n        // Add item to order\n        order.addItem(product, quantity);\n        save(order);\n        \n        return true;\n    }\n    \n    @Override\n    public boolean completeOrder(Long orderId) throws Exception {\n        Optional<Order> orderOpt = findById(orderId);\n        if (!orderOpt.isPresent()) {\n            throw new NoSuchElementException(\"Order not found: \" + orderId);\n        }\n        \n        Order order = orderOpt.get();\n        if (order.getItems().isEmpty()) {\n            throw new IllegalStateException(\"Cannot complete empty order\");\n        }\n        \n        order.complete();\n        save(order);\n        \n        return true;\n    }\n    \n    @Override\n    public boolean cancelOrder(Long orderId) throws Exception {\n        Optional<Order> orderOpt = findById(orderId);\n        if (!orderOpt.isPresent()) {\n            throw new NoSuchElementException(\"Order not found: \" + orderId);\n        }\n        \n        Order order = orderOpt.get();\n        \n        // Release reserved stock\n        for (Order.OrderItem item : order.getItems()) {\n            releaseStock(item.getProductId(), item.getQuantity());\n        }\n        \n        order.cancel();\n        save(order);\n        \n        return true;\n    }\n    \n    @Override\n    public double calculateOrderTotal(Long orderId) {\n        return findById(orderId)\n                .map(Order::calculateTotal)\n                .orElse(0.0);\n    }\n    \n    // InventoryService implementation\n    @Override\n    public boolean checkAvailability(Long productId, int quantity) {\n        return productService.findById(productId)\n                .map(p -> p.getStockQuantity() >= quantity)\n                .orElse(false);\n    }\n    \n    @Override\n    public void reserveStock(Long productId, int quantity) throws Exception {\n        Optional<Product> productOpt = productService.findById(productId);\n        if (!productOpt.isPresent()) {\n            throw new NoSuchElementException(\"Product not found: \" + productId);\n        }\n        \n        Product product = productOpt.get();\n        if (product.getStockQuantity() < quantity) {\n            throw new IllegalStateException(\"Insufficient stock\");\n        }\n        \n        product.adjustStock(-quantity);\n        productService.save(product);\n    }\n    \n    @Override\n    public void releaseStock(Long productId, int quantity) {\n        productService.findById(productId).ifPresent(product -> {\n            product.adjustStock(quantity);\n            productService.save(product);\n        });\n    }\n    \n    @Override\n    public List<Product> getLowStockProducts(int threshold) {\n        return productService.findAll().stream()\n                .filter(p -> p.getStockQuantity() < threshold && p.getStockQuantity() > 0)\n                .sorted(Comparator.comparing(Product::getStockQuantity))\n                .collect(Collectors.toList());\n    }\n    \n    // Additional business methods\n    public Map<Order.OrderStatus, Long> getOrderCountByStatus() {\n        return orders.values().stream()\n                .collect(Collectors.groupingBy(\n                    Order::getStatus,\n                    Collectors.counting()\n                ));\n    }\n    \n    public List<Order> getActiveOrders() {\n        return orders.values().stream()\n                .filter(o -> o.getStatus().isActive())\n                .sorted(Comparator.comparing(Order::getCreatedAt))\n                .collect(Collectors.toList());\n    }\n    \n    public double getTotalRevenue() {\n        return orders.values().stream()\n                .filter(o -> o.getStatus() == Order.OrderStatus.COMPLETED)\n                .mapToDouble(Order::calculateTotal)\n                .sum();\n    }\n    \n    public Map<String, Double> getRevenueByCustomer() {\n        return orders.values().stream()\n                .filter(o -> o.getStatus() == Order.OrderStatus.COMPLETED)\n                .collect(Collectors.groupingBy(\n                    Order::getCustomerEmail,\n                    Collectors.summingDouble(Order::calculateTotal)\n                ));\n    }\n}\n\n// Validation marker\nclass OrderServiceValidator {\n    public static void main(String[] args) {\n        System.out.println(\"✓ services/OrderService.java validated and saved\");\n    }\n}"
      }
    }
  },
  {
    "jsonrpc": "2.0",
    "id": 7,
    "method": "tools/call",
    "params": {
      "name": "execute_code",
      "arguments": {
        "language": "java",
        "filename": "Main.java",
        "save": true,
        "session_id": "java-ecommerce",
        "code": "import models.*;\nimport services.*;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n/**\n * Main class demonstrating the e-commerce inventory system\n */\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"=== MULTI-FILE JAVA E-COMMERCE SYSTEM DEMO ===\");\n        System.out.println();\n        \n        // Initialize services\n        ProductService productService = new ProductService();\n        OrderService orderService = new OrderService(productService);\n        \n        System.out.println(\"✓ Services initialized\");\n        System.out.println();\n        \n        // Create products\n        System.out.println(\"=== CREATING PRODUCTS ===\");\n        \n        Product laptop = productService.createProduct(\n            \"ThinkPad X1 Carbon\",\n            \"Ultra-lightweight business laptop with 14-inch display\",\n            1299.99,\n            15\n        );\n        System.out.println(\"Created: \" + laptop);\n        \n        Product mouse = productService.createProduct(\n            \"Logitech MX Master 3\",\n            \"Advanced wireless mouse with ergonomic design\",\n            99.99,\n            50\n        );\n        System.out.println(\"Created: \" + mouse);\n        \n        Product keyboard = productService.createProduct(\n            \"Mechanical Keyboard RGB\",\n            \"Gaming keyboard with Cherry MX switches\",\n            149.99,\n            25\n        );\n        System.out.println(\"Created: \" + keyboard);\n        \n        Product monitor = productService.createProduct(\n            \"4K Ultra HD Monitor\",\n            \"27-inch professional monitor with HDR support\",\n            599.99,\n            8\n        );\n        System.out.println(\"Created: \" + monitor);\n        \n        Product headphones = productService.createProduct(\n            \"Sony WH-1000XM4\",\n            \"Premium noise-cancelling wireless headphones\",\n            349.99,\n            0  // Out of stock\n        );\n        System.out.println(\"Created: \" + headphones);\n        \n        System.out.println();\n        System.out.println(\"=== TESTING PRODUCT SEARCH ===\");\n        \n        // Search products\n        List<Product> searchResults = productService.searchProducts(\"keyboard\");\n        System.out.println(\"Search for 'keyboard': \" + searchResults.size() + \" results\");\n        searchResults.forEach(p -> System.out.println(\"  - \" + p.getName()));\n        \n        // Get products in stock\n        List<Product> inStock = productService.getProductsInStock();\n        System.out.println(\"\\nProducts in stock: \" + inStock.size());\n        inStock.forEach(p -> System.out.println(\"  - \" + p.getName() + \" (\" + p.getStockQuantity() + \" units)\"));\n        \n        System.out.println();\n        System.out.println(\"=== CREATING ORDERS ===\");\n        \n        // Create orders\n        try {\n            Order order1 = orderService.createOrder(\"alice@example.com\");\n            System.out.println(\"Created order for alice@example.com: #\" + order1.getId());\n            \n            // Add items to order 1\n            orderService.addItemToOrder(order1.getId(), laptop.getId(), 1);\n            System.out.println(\"  Added 1x \" + laptop.getName());\n            \n            orderService.addItemToOrder(order1.getId(), mouse.getId(), 2);\n            System.out.println(\"  Added 2x \" + mouse.getName());\n            \n            orderService.addItemToOrder(order1.getId(), keyboard.getId(), 1);\n            System.out.println(\"  Added 1x \" + keyboard.getName());\n            \n            System.out.println(\"  Order total: $\" + String.format(\"%.2f\", order1.calculateTotal()));\n            \n            // Create second order\n            Order order2 = orderService.createOrder(\"bob@example.com\");\n            System.out.println(\"\\nCreated order for bob@example.com: #\" + order2.getId());\n            \n            orderService.addItemToOrder(order2.getId(), monitor.getId(), 2);\n            System.out.println(\"  Added 2x \" + monitor.getName());\n            \n            System.out.println(\"  Order total: $\" + String.format(\"%.2f\", order2.calculateTotal()));\n            \n        } catch (Exception e) {\n            System.err.println(\"Error creating orders: \" + e.getMessage());\n        }\n        \n        System.out.println();\n        System.out.println(\"=== TESTING ERROR HANDLING ===\");\n        \n        // Test insufficient stock\n        try {\n            Order order3 = orderService.createOrder(\"charlie@example.com\");\n            orderService.addItemToOrder(order3.getId(), headphones.getId(), 1);\n        } catch (Exception e) {\n            System.out.println(\"✓ Correctly caught error: \" + e.getMessage());\n        }\n        \n        // Test invalid product\n        try {\n            Order order4 = orderService.createOrder(\"dave@example.com\");\n            orderService.addItemToOrder(order4.getId(), 999L, 1);\n        } catch (Exception e) {\n            System.out.println(\"✓ Correctly caught error: \" + e.getMessage());\n        }\n        \n        System.out.println();\n        System.out.println(\"=== INVENTORY STATUS ===\");\n        \n        // Check low stock products\n        List<Product> lowStock = orderService.getLowStockProducts(10);\n        System.out.println(\"Low stock products (< 10 units):\");\n        lowStock.forEach(p -> System.out.println(\"  - \" + p.getName() + \": \" + p.getStockQuantity() + \" units\"));\n        \n        // Product status summary\n        Map<Product.ProductStatus, Long> statusCount = productService.getProductCountByStatus();\n        System.out.println(\"\\nProduct status summary:\");\n        statusCount.forEach((status, count) -> \n            System.out.println(\"  - \" + status.getDisplayName() + \": \" + count));\n        \n        // Total inventory value\n        System.out.println(\"\\nTotal inventory value: $\" + \n            String.format(\"%.2f\", productService.getTotalInventoryValue()));\n        \n        System.out.println();\n        System.out.println(\"=== COMPLETING ORDERS ===\");\n        \n        try {\n            // Complete first order\n            orderService.completeOrder(1L);\n            System.out.println(\"✓ Order #1 completed\");\n            \n            // Check updated stock\n            productService.findById(laptop.getId()).ifPresent(p -> \n                System.out.println(\"  \" + p.getName() + \" stock: \" + p.getStockQuantity()));\n            \n        } catch (Exception e) {\n            System.err.println(\"Error completing order: \" + e.getMessage());\n        }\n        \n        System.out.println();\n        System.out.println(\"=== USING JAVA 8+ FEATURES ===\");\n        \n        // Stream API - Find most expensive product\n        productService.getMostExpensiveProduct()\n            .ifPresent(p -> System.out.println(\"Most expensive: \" + p.getName() + \" ($\" + p.getPrice() + \")\"));\n        \n        // Optional handling\n        Optional<Product> maybeProduct = productService.getProduct(999L);\n        String productName = maybeProduct\n            .map(Product::getName)\n            .orElse(\"Product not found\");\n        System.out.println(\"Product #999: \" + productName);\n        \n        // Collectors and grouping\n        Map<Order.OrderStatus, Long> orderStats = orderService.getOrderCountByStatus();\n        System.out.println(\"\\nOrder statistics:\");\n        orderStats.forEach((status, count) -> \n            System.out.println(\"  - \" + status.getDisplayName() + \": \" + count + \" orders\"));\n        \n        // Method references and lambda expressions\n        List<String> activeProductNames = productService.getProductsInStock()\n            .stream()\n            .map(Product::getName)\n            .sorted()\n            .collect(Collectors.toList());\n        System.out.println(\"\\nActive products: \" + String.join(\", \", activeProductNames));\n        \n        System.out.println();\n        System.out.println(\"=== FINAL SUMMARY ===\");\n        System.out.println(\"Total products: \" + productService.count());\n        System.out.println(\"Total orders: \" + orderService.count());\n        System.out.println(\"Total revenue: $\" + String.format(\"%.2f\", orderService.getTotalRevenue()));\n        \n        System.out.println();\n        System.out.println(\"✅ Multi-file Java application demo completed!\");\n        System.out.println();\n        System.out.println(\"🔄 All files persist within this container session\");\n        System.out.println(\"🗑️  Files will be cleaned up when container restarts\");\n        System.out.println(\"🔒 Host system remains completely isolated\");\n    }\n}"
      }
    }
  }
]